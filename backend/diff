diff --git a/backend/connection_manager/connection_manager.ts b/backend/connection_manager/connection_manager.ts
deleted file mode 100644
index 8d5fa00..0000000
--- a/backend/connection_manager/connection_manager.ts
+++ /dev/null
@@ -1,33 +0,0 @@
-import { randomUUID } from 'crypto';
-import { UUID } from '../../shared/types.js';
-import { GameService } from '../services/game_service.js';
-import { GameSocket } from '../types/interfaces.js';
-
-export const connections: Map<UUID, GameSocket> = new Map();
-export const userIdToConnectionMap: Map<UUID, GameSocket> = new Map();
-
-function generateId(): UUID {
-	let id: UUID;
-	do {
-		id = randomUUID() as UUID;
-	} while (connections.has(id)); // Collision check
-	return id;
-}
-
-export function addConnection(user_id: UUID, socket: GameSocket): UUID {
-	const id = generateId();
-	socket.socketId = id;
-	connections.set(id, socket);
-	connections.set(user_id, socket);
-	return id;
-}
-
-export function handleClose(event: CloseEvent) {
-	const socket = event.target as GameSocket;
-	connections.delete(socket.socketId);
-}
-
-export function handleMessage(event: MessageEvent) {
-	const socket = event.target as GameSocket;
-	GameService.getInstance().handleMessage(socket.socketId, event.data);
-}
diff --git a/backend/fastify.ts b/backend/fastify.ts
index 5ced016..7880e8d 100644
--- a/backend/fastify.ts
+++ b/backend/fastify.ts
@@ -1,10 +1,9 @@
 'use strict';
 
-import fastifyCors from '@fastify/cors';
 import sensible from '@fastify/sensible';
 import fastifySwagger from '@fastify/swagger';
 import fastifySwaggerUI from '@fastify/swagger-ui';
-import websocket from '@fastify/websocket';
+import fastifyCors from '@fastify/cors';
 import type { FastifyInstance } from 'fastify';
 import {
 	fastifyZodOpenApiPlugin,
@@ -12,10 +11,10 @@ import {
 	serializerCompiler,
 	validatorCompiler,
 } from 'fastify-zod-openapi';
-import { authHook } from './hooks/auth.js';
 import tournamentRoutes from './routes/tournament.js';
 import userRoutes from './routes/user.js';
 
+
 // Pass --options via CLI arguments in command to enable these options.
 const options = {};
 
@@ -24,9 +23,9 @@ export default async function fastifyInit(
 	opts: Record<string, any>
 ) {
 	fastify.register(fastifyCors, {
-		origin: '*', // allow all origins for now
-	});
-
+		origin: '*' // allow all origins for now
+	});	
+	
 	// Configure swagger
 	await fastify.register(fastifyZodOpenApiPlugin);
 	await fastify.register(fastifySwagger, {
@@ -50,14 +49,9 @@ export default async function fastifyInit(
 	// Load sensible
 	await fastify.register(sensible);
 
-	// Enable websockets
-	await fastify.register(websocket);
-
 	// Load routes
 	await fastify.register(userRoutes, { prefix: '/users' });
 	await fastify.register(tournamentRoutes, { prefix: '/tournaments' });
-
-	fastify.addHook('preHandler', authHook);
 }
 
 const _options = options;
diff --git a/backend/game/match.ts b/backend/game/match.ts
deleted file mode 100644
index 6dc4884..0000000
--- a/backend/game/match.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import { FIELD_HEIGTH, FIELD_WIDTH } from '../../shared/constants.js';
-import { MatchStatus } from '../../shared/enums.js';
-import { UUID, Vector } from '../../shared/types.js';
-
-export interface Participant {
-	userId: UUID;
-	participantId: UUID;
-}
-
-export class Match {
-	matchId: UUID;
-	users: UUID[];
-	score: Vector;
-	ballCoordinate: Vector;
-	ballDirection: Vector;
-	status: MatchStatus;
-	paddlePos: number[];
-
-	constructor(match_id: UUID, users: UUID[]) {
-		this.matchId = match_id;
-		this.users = users;
-		this.score = { x: 0, y: 0 };
-		this.ballCoordinate = { x: FIELD_WIDTH / 2, y: FIELD_HEIGTH / 2 };
-		this.ballDirection = this.normalize({ x: 1, y: Math.random() * 2 });
-		this.status = MatchStatus.Pending;
-		this.paddlePos = new Array(users.length).fill(0);
-	}
-
-	private normalize(dir: Vector): Vector {
-		const length = Math.sqrt(dir.x * dir.x + dir.y * dir.y);
-
-		if (length === 0) return { x: 0, y: 0 };
-
-		return {
-			x: dir.x / length,
-			y: dir.y / length,
-		};
-	}
-}
diff --git a/backend/hooks/auth.ts b/backend/hooks/auth.ts
index 208d156..af16897 100644
--- a/backend/hooks/auth.ts
+++ b/backend/hooks/auth.ts
@@ -13,11 +13,9 @@ async function authenticateRequest(request: FastifyRequest) {
 		if (!authHeader) throw new AuthenticationFailedError(ERROR_NO_TOKEN);
 
 		// Expect header like "Bearer <token>"
-		const parts = authHeader.split(' ')[1];
-		if (parts[0] !== 'Bearer' || !parts[1])
-			throw new AuthenticationFailedError(ERROR_MALFORMED_TOKEN);
+		const token = authHeader.split(' ')[1];
+		if (!token) throw new AuthenticationFailedError(ERROR_MALFORMED_TOKEN);
 
-		const token = parts[1];
 		request.user = UserService.verifyToken(token);
 	} catch (error) {
 		if (error instanceof AuthenticationFailedError)
@@ -29,6 +27,11 @@ async function authenticateRequest(request: FastifyRequest) {
 	}
 }
 
-export const authHook = async (request: FastifyRequest) => {
-	//await authenticateRequest(request);
-};
+export function authWrapper<RouteGeneric extends RouteGenericInterface = {}>(
+	handler: (request: FastifyRequest<RouteGeneric>) => any | Promise<any>
+) {
+	return async (request: FastifyRequest<RouteGeneric>) => {
+		//await authenticateRequest(request);
+		return handler(request);
+	};
+}
diff --git a/backend/repositories/participant_repository.ts b/backend/repositories/participant_repository.ts
index 43df55f..a98b8fc 100644
--- a/backend/repositories/participant_repository.ts
+++ b/backend/repositories/participant_repository.ts
@@ -13,22 +13,6 @@ import * as db from '../utils/db.js';
 export default class ParticipantRepository {
 	static table = 'tournament_participant';
 
-	static async getParticipant(
-		participant_id: UUID
-	): Promise<Participant | null> {
-		const result = await db.pool.query<Participant>(
-			`SELECT	id,
-					tournament_id,
-					user_id,
-					status
-			FROM ${this.table}
-			WHERE participant_id = $1`,
-			[participant_id]
-		);
-		if (!result.rowCount) return null;
-		return ParticipantSchema.parse(result.rows);
-	}
-
 	static async getTournamentParticipants(
 		tournament_id: UUID
 	): Promise<Participant[]> {
diff --git a/backend/routes/tournament.ts b/backend/routes/tournament.ts
index ed66c0d..52d2635 100644
--- a/backend/routes/tournament.ts
+++ b/backend/routes/tournament.ts
@@ -15,8 +15,9 @@ import {
 } from '../../shared/schemas/tournament.js';
 import { UUID, zUUID } from '../../shared/types.js';
 import { zodError } from '../../shared/utils.js';
+import { authWrapper } from '../hooks/auth.js';
 import TournamentService from '../services/tournament_service.js';
-import { routeConfig } from '../utils/http_utils.js';
+import { getHttpResponse } from '../utils/http_utils.js';
 
 async function createTournament(
 	request: FastifyRequest<{ Body: CreateTournamentApi }>
@@ -67,19 +68,19 @@ export default async function tournamentRoutes(
 ) {
 	fastify.get(
 		'/:id',
-		routeConfig({
+		getHttpResponse({
 			params: z.object({ id: zUUID }),
 			response: FullTournamentSchema,
 		}),
-		getTournament
+		authWrapper(getTournament)
 	);
 
 	fastify.post(
 		'/',
-		routeConfig({
+		getHttpResponse({
 			body: CreateTournamentApiSchema,
 			response: TournamentSchema,
 		}),
-		createTournament
+		authWrapper(createTournament)
 	);
 }
diff --git a/backend/routes/user.ts b/backend/routes/user.ts
index 81a4182..bd00a05 100644
--- a/backend/routes/user.ts
+++ b/backend/routes/user.ts
@@ -7,16 +7,15 @@ import { logger } from '../../shared/logger.js';
 import {
 	AuthRequest,
 	AuthRequestSchema,
-	AuthResponse,
 	CreateUser,
 	CreateUserSchema,
 	User,
 	UserSchema,
 } from '../../shared/schemas/user.js';
 import { zodError } from '../../shared/utils.js';
+import { authWrapper } from '../hooks/auth.js';
 import UserRepository from '../repositories/user_repository.js';
-import UserService from '../services/user_service.js';
-import { routeConfig } from '../utils/http_utils.js';
+import { getHttpResponse } from '../utils/http_utils.js';
 
 async function getUser(
 	request: FastifyRequest<{ Params: { login: string } }>
@@ -57,14 +56,15 @@ async function createUser(
 
 async function authenticate(
 	request: FastifyRequest<{ Body: AuthRequest }>
-): Promise<AuthResponse> {
+): Promise<User> {
 	try {
-		const authResponse = await UserService.authenticate(request.body);
-		if (!authResponse)
+		const authenticatedUser: User | null =
+			await UserRepository.authenticateUser(request.body);
+		if (!authenticatedUser)
 			throw request.server.httpErrors.unauthorized(
 				constants.ERROR_INVALID_CREDENTIALS
 			);
-		return authResponse;
+		return authenticatedUser;
 	} catch (error) {
 		if (error instanceof z.ZodError)
 			throw request.server.httpErrors.badRequest(error.message);
@@ -75,34 +75,26 @@ async function authenticate(
 	}
 }
 
-export default async function userRoutes(
+export default async function user(
 	fastify: FastifyInstance,
 	opts: Record<string, any>
 ) {
 	fastify.get(
 		'/:login',
-		routeConfig({
+		getHttpResponse({
 			params: z.object({ login: z.string() }),
 			response: UserSchema,
 		}),
-		getUser
+		authWrapper(getUser)
 	);
 	fastify.post<{ Body: CreateUser }>(
 		'/',
-		routeConfig({
-			body: CreateUserSchema,
-			response: UserSchema,
-			secure: false,
-		}),
-		createUser
+		getHttpResponse({ body: CreateUserSchema, response: UserSchema }),
+		authWrapper(createUser)
 	);
 	fastify.post<{ Body: AuthRequest }>(
 		'/auth',
-		routeConfig({
-			body: AuthRequestSchema,
-			response: UserSchema,
-			secure: false,
-		}),
+		getHttpResponse({ body: AuthRequestSchema, response: UserSchema }),
 		authenticate
 	);
 }
diff --git a/backend/routes/websocket.ts b/backend/routes/websocket.ts
deleted file mode 100644
index f4ecd3a..0000000
--- a/backend/routes/websocket.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-import { FastifyInstance, FastifyRequest } from 'fastify';
-import { AuthenticationError } from '../../shared/exceptions.js';
-import { UUID } from '../../shared/types.js';
-import {
-	addConnection,
-	handleClose,
-	handleMessage,
-} from '../connection_manager/connection_manager.js';
-import { GameSocket } from '../types/interfaces.js';
-
-function handleIncomingConnection(
-	webSocket: WebSocket,
-	request: FastifyRequest
-) {
-	if (!request.user) throw new AuthenticationError('User not authenticated');
-	const socket = webSocket as GameSocket;
-	socket.addEventListener('message', handleMessage);
-	socket.addEventListener('close', handleClose);
-	addConnection(request.user.userId, socket);
-}
-
-export default async function websocketRoutes(
-	fastify: FastifyInstance,
-	opts: Record<string, any>
-) {
-	fastify.get('/', { websocket: true }, handleIncomingConnection);
-}
diff --git a/backend/services/game_service.ts b/backend/services/game_service.ts
deleted file mode 100644
index f86f796..0000000
--- a/backend/services/game_service.ts
+++ /dev/null
@@ -1,154 +0,0 @@
-import {
-	EMPTY_UUID,
-	ERROR_USER_NOT_CONNECTED,
-	PAUSE_MESSAGE,
-	START_MESSAGE,
-} from '../../shared/constants.js';
-import { MatchStatus } from '../../shared/enums.js';
-import {
-	MatchNotFoundError,
-	MatchNotReadyError,
-	ParticipantNotFoundError,
-	UserNotConnectedError,
-} from '../../shared/exceptions.js';
-import { logger } from '../../shared/logger.js';
-import { Match as MatchFromSchema } from '../../shared/schemas/match.js';
-import { Message, UUID } from '../../shared/types.js';
-import { connections } from '../connection_manager/connection_manager.js';
-import { Match } from '../game/match.js';
-import MatchRepository from '../repositories/match_repository.js';
-import ParticipantRepository from '../repositories/participant_repository.js';
-
-export class GameService {
-	private static instance: GameService;
-	private matches = new Map<UUID, Match>();
-
-	private constructor() {}
-
-	static getInstance(): GameService {
-		if (!this.instance) {
-			this.instance = new GameService();
-		}
-		return this.instance;
-	}
-
-	private readonly protocolFunctionMap = {
-		i: this.handleInitiate,
-		s: this.handleStart,
-		q: this.handleQuit,
-		p: this.handlePause,
-		m: this.handleMove,
-		a: this.handleAccept,
-		d: this.handleDecline,
-	} as const;
-
-	handleMessage(connectionId: UUID, message: string) {
-		const json = JSON.parse(message);
-		const handler =
-			this.protocolFunctionMap[
-				json.type as keyof typeof this.protocolFunctionMap
-			];
-		if (handler) {
-			try {
-				handler.call(this, connectionId, json);
-			} catch (error) {
-				// destroy game?
-			}
-		} else {
-			logger.warn(`No handler for message type: ${json.type}`);
-		}
-	}
-
-	private async handleInitiate(connectionId: UUID, message: Message) {
-		const match_id = message.d as UUID;
-		const match = await MatchRepository.getMatch(match_id);
-		if (!match) throw new MatchNotFoundError(match_id);
-		const matchObject = await this.createMatchObject(match);
-		matchObject.users.forEach(p => {
-			this.matches.set(p, matchObject);
-		});
-		this.sendInvitation(
-			this.getUsersFromConnectionId(connectionId, matchObject.users)
-				.others
-		);
-	}
-
-	private async handleStart(connectionId: UUID, message: Message) {
-		const match = this.matches.get(connectionId);
-		if (!match) throw new MatchNotFoundError();
-		this.sendMessage(START_MESSAGE, match.users);
-		match.status = MatchStatus.InProgress;
-	}
-
-	private async handlePause(connectionId: UUID, message: Message) {
-		const match = this.matches.get(connectionId);
-		if (!match) throw new MatchNotFoundError();
-		this.sendMessage(PAUSE_MESSAGE, match.users);
-		match.status = MatchStatus.Paused;
-	}
-
-	private async handleMove(connectionId: UUID, message: Message) {
-		const match = this.matches.get(connectionId);
-		if (!match) throw new MatchNotFoundError();
-		const users = this.getUsersFromConnectionId(connectionId, match.users);
-		const i = match.users.findIndex(p => p === users.current);
-		match.paddlePos[i] = Number(message.d);
-		this.sendMove(message, users.others);
-	}
-
-	private async handleAccept(connectionId: UUID, message: Message) {
-		// handle tournament and match
-	}
-
-	private async handleDecline(connectionId: UUID, message: Message) {
-		// handle tournament and match
-	}
-
-	private async handleQuit(connectionId: UUID, message: Message) {
-		// only match, leave tournament via api
-	}
-
-	private async createMatchObject(match: MatchFromSchema): Promise<Match> {
-		if (!match.participant_1_id || !match.participant_2_id)
-			throw new MatchNotReadyError(match.id);
-		const participant1 = await ParticipantRepository.getParticipant(
-			match.participant_1_id
-		);
-		const participant2 = await ParticipantRepository.getParticipant(
-			match.participant_2_id
-		);
-		if (!participant1 || !participant2)
-			throw new ParticipantNotFoundError(
-				participant1 ? match.participant_2_id : match.participant_1_id,
-				'participant_id'
-			);
-		const match_object = new Match(match.id, [
-			participant1.user_id,
-			participant2.user_id,
-		]);
-		return match_object;
-	}
-
-	private sendInvitation(userIds: UUID[]) {}
-	private sendMessage(message: Message, user_ids: UUID[]) {}
-	private sendMove(message: Message, user_ids: UUID[]) {}
-	private sendAccept(message: Message, user_ids: UUID[]) {}
-	private sendDecline(message: Message, user_ids: UUID[]) {}
-
-	private getUsersFromConnectionId(
-		connectionId: UUID,
-		participants: UUID[]
-	): { current: UUID; others: UUID[] } {
-		var current: UUID = EMPTY_UUID;
-		const others: UUID[] = [];
-
-		for (const p of participants) {
-			const socket = connections.get(p);
-			if (!socket)
-				throw new UserNotConnectedError(ERROR_USER_NOT_CONNECTED);
-			if (socket.socketId == connectionId) current = p;
-			else others.push(p);
-		}
-		return { current: current, others: others };
-	}
-}
diff --git a/backend/services/match_service.ts b/backend/services/match_service.ts
index 4896f4a..659494d 100644
--- a/backend/services/match_service.ts
+++ b/backend/services/match_service.ts
@@ -20,7 +20,7 @@ export default class MatchService {
 		const match = await MatchRepository.getMatch(match_id);
 		if (!match) throw new MatchNotFoundError(match_id);
 
-		if (participant_id === match.participant_1_id)
+		if (participant_id == match.participant_1_id)
 			match.participant_1_score += 1;
 		else match.participant_2_score += 1;
 
diff --git a/backend/services/user_service.ts b/backend/services/user_service.ts
index 1e6095e..6d5cb32 100644
--- a/backend/services/user_service.ts
+++ b/backend/services/user_service.ts
@@ -17,7 +17,7 @@ import {
 	User,
 } from '../../shared/schemas/user.js';
 import UserRepository from '../repositories/user_repository.js';
-import { AuthPayload } from '../types/interfaces.js';
+import { AuthPayload } from '../types/auth_payload.js';
 
 export default class UserService {
 	static async authenticate(authRequest: AuthRequest): Promise<AuthResponse> {
diff --git a/backend/types/auth_payload.ts b/backend/types/auth_payload.ts
new file mode 100644
index 0000000..9235aaf
--- /dev/null
+++ b/backend/types/auth_payload.ts
@@ -0,0 +1,5 @@
+import { JwtPayload } from 'jsonwebtoken';
+
+export interface AuthPayload extends JwtPayload {
+	userId: string;
+}
diff --git a/backend/types/fastify.d.ts b/backend/types/fastify.d.ts
index 4ebd9ad..0ed744f 100644
--- a/backend/types/fastify.d.ts
+++ b/backend/types/fastify.d.ts
@@ -3,7 +3,7 @@ import 'fastify';
 declare module 'fastify' {
 	interface FastifyRequest {
 		user?: {
-			userId: UUID;
+			userId: string;
 		};
 	}
 }
diff --git a/backend/types/interfaces.ts b/backend/types/interfaces.ts
deleted file mode 100644
index 33b60f0..0000000
--- a/backend/types/interfaces.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import { JwtPayload } from 'jsonwebtoken';
-import { UUID } from '../../shared/types.js';
-
-export interface AuthPayload extends JwtPayload {
-	userId: string;
-}
-
-export interface GameSocket extends WebSocket {
-	socketId: UUID;
-}
diff --git a/backend/utils/http_utils.ts b/backend/utils/http_utils.ts
index 7691e6d..4289c26 100644
--- a/backend/utils/http_utils.ts
+++ b/backend/utils/http_utils.ts
@@ -1,17 +1,17 @@
+'use strict';
+
 import z from 'zod';
 
-export function routeConfig({
+export function getHttpResponse({
 	response,
 	params,
 	body,
 	code = 200,
-	secure = true,
 }: {
 	params?: z.ZodType;
 	body?: z.ZodType;
 	code?: number;
 	response?: z.ZodType;
-	secure?: boolean;
 }) {
 	const schemaConfig: { [key: string]: any } = {};
 
@@ -21,6 +21,5 @@ export function routeConfig({
 	if (params) schemaConfig.params = params;
 	if (body) schemaConfig.body = body;
 
-	if (!secure) return { schema: schemaConfig, preHandler: [] };
 	return { schema: schemaConfig };
 }
diff --git a/frontend/TODO.txt b/frontend/TODO.txt
index 852b4a3..a086d5c 100644
--- a/frontend/TODO.txt
+++ b/frontend/TODO.txt
@@ -1,4 +1,4 @@
-DONE:
+LEARNED:
 - How do HTML, CSS and JS integrate
 	- Ways to integrate CSS
 		-> inline: <example style="[here]">
@@ -190,23 +190,56 @@ DONE:
 	-> objects and arrays:
 		-> arrays get type that applies to all elements
 		-> objects elements types cannot be changed and no elements can be added
+- Where to hash passwords
+	-> in the backend
+	-> backend can hash and apply salts with more control
+	-> hashing is about avoiding plain storage, not transmission security
+- What is a JWT
+	-> proofs that user has logged in
+	-> server does not need to keep a session register
+	-> three parts:
+		-> header (base64)
+			-> token and signature encryption type
+		-> payload (base64)
+			-> e.g. id, role, expiry
+		-> signature
+			-> created by hashing header plus payload with a private key on server
+	-> client can resend its given jwt but not generated one
+	-> server can verify token realness by re-running encryption and checking signature
+	-> Common problem:
+		-> Tokens still work after logout unless a blacklist is kept
+			-> blacklist defeats original purpose
 
 TODO:
 Project:
-- Integrate Rufus' work
+- Figure out how to display Wouters API webpage
 
-- Add my fix for routing logic
+- Add JWT
+	- make it live in a variable for now
+		- (will log out at page reload)
 
-- Add chrome launcher to compound launch.json?
 
+- Add websocket button?
 - Create web socket
-- Start working on login
+	- Add websocket class
+	- Make Websocket Connection Button
+	- Display everything that is send over websocket
+	- How to pass events to game screen?
+
+- Add music
 - Design tournament creation modal
 - Make Tournament Creation Modal
+- Add more closing functionality to modals
+
 
-Learn:
-- Learn about Session History API
-	- What does the URL mean?
-	- What happens when the URL is manipulated?
-	- What states exactly are saved?
-	- What exactly do elements look like?
\ No newline at end of file
+DISCUSSION POINTS:
+- Is Babylon Phisics Engine allowed?
+	- Three Ways:
+		- Most bare: have own code that simulates game
+		- Medium: Use babylon plus extra code
+		- Advanced: Use CannonJS
+	- I think we go even use CannonJS
+- Do we want Powerups/Obstacles?
+- What modules are we doing?
+- Who does what?
+- Should we priotize getting a running game?
\ No newline at end of file
diff --git a/frontend/index.html b/frontend/index.html
index e950966..f1cfd41 100644
--- a/frontend/index.html
+++ b/frontend/index.html
@@ -10,4 +10,3 @@
 		<script type="module" src="/src/main.ts"></script>
 	</body>
 </html>
-
diff --git a/frontend/public/pong2p.glb b/frontend/public/pong.glb
similarity index 98%
rename from frontend/public/pong2p.glb
rename to frontend/public/pong.glb
index dc50e09..24681ed 100644
Binary files a/frontend/public/pong2p.glb and b/frontend/public/pong.glb differ
diff --git a/frontend/public/pong3p.glb b/frontend/public/pong3p.glb
deleted file mode 100644
index 13caf26..0000000
Binary files a/frontend/public/pong3p.glb and /dev/null differ
diff --git a/frontend/public/pong4p.glb b/frontend/public/pong4p.glb
deleted file mode 100644
index 850958c..0000000
Binary files a/frontend/public/pong4p.glb and /dev/null differ
diff --git a/frontend/src/game/3Dview_old.js b/frontend/src/game/3Dview_old.js
new file mode 100644
index 0000000..c0563a0
--- /dev/null
+++ b/frontend/src/game/3Dview_old.js
@@ -0,0 +1,468 @@
+export function initPongScene() {
+	const canvas = document.getElementById('renderCanvas');
+	// Enable alpha in the WebGL context so the canvas can be transparent
+	const engine = new BABYLON.Engine(canvas, true, {
+		preserveDrawingBuffer: true,
+		stencil: true,
+		alpha: true,
+	});
+	const scene = new BABYLON.Scene(engine);
+	// Make the scene clear color fully transparent (r,g,b,alpha)
+	if (BABYLON.Color4) {
+		scene.clearColor = new BABYLON.Color4(0, 0, 0, 0);
+	}
+
+	// Camera and light
+	// Configurable defaults
+	let DEFAULT_CAMERA_RADIUS = 18; // units from camera to target, editable at runtime
+	let DEFAULT_CAMERA_BETA = Math.PI / 3; // vertical angle
+	let DEFAULT_CAMERA_TARGET_Y = -3; // vertical offset applied to computed target
+
+	window.setDefaultCameraRadius = v => {
+		DEFAULT_CAMERA_RADIUS = Number(v);
+		console.log('DEFAULT_CAMERA_RADIUS ->', DEFAULT_CAMERA_RADIUS);
+	};
+	window.setDefaultCameraBeta = v => {
+		DEFAULT_CAMERA_BETA = Number(v);
+		console.log('DEFAULT_CAMERA_BETA ->', DEFAULT_CAMERA_BETA);
+	};
+	window.setDefaultCameraTargetY = v => {
+		DEFAULT_CAMERA_TARGET_Y = Number(v);
+		console.log('DEFAULT_CAMERA_TARGET_Y ->', DEFAULT_CAMERA_TARGET_Y);
+	};
+
+	const camera = new BABYLON.ArcRotateCamera(
+		'cam',
+		Math.PI / 2,
+		DEFAULT_CAMERA_BETA,
+		DEFAULT_CAMERA_RADIUS,
+		BABYLON.Vector3.Zero(),
+		scene
+	);
+	camera.attachControl(canvas, true);
+	camera.wheelPrecision = 50;
+	// Disable camera keyboard controls so arrow keys can be used for gameplay input
+	// Clearing these arrays prevents the camera from responding to arrow keys.
+	camera.keysUp = [];
+	camera.keysDown = [];
+	camera.keysLeft = [];
+	camera.keysRight = [];
+
+	// --- Configurable variables (centralized) ---
+	// Symmetric paddle movement range (center = 0). Default: 4.25
+	window.PADDLE_RANGE =
+		typeof window.PADDLE_RANGE === 'number' ? window.PADDLE_RANGE : 4.25;
+	window.setPaddleRange = function (v) {
+		window.PADDLE_RANGE = Number(v);
+		console.log('PADDLE_RANGE ->', window.PADDLE_RANGE);
+	};
+
+	// Paddle movement speed (units per second). Mutable via setter.
+	let PADDLE_SPEED =
+		typeof window.PADDLE_SPEED === 'number' ? window.PADDLE_SPEED : 6;
+	window.setPaddleSpeed = function (v) {
+		PADDLE_SPEED = Number(v);
+		console.log('PADDLE_SPEED ->', PADDLE_SPEED);
+	};
+
+	// Debug logging settings for paddles
+	window.debugPaddleLogging =
+		window.debugPaddleLogging === undefined
+			? true
+			: window.debugPaddleLogging;
+	const PADDLE_LOG_INTERVAL = 250; // ms
+	let _lastPaddleLog = 0;
+	// Expose PADDLE_SPEED to the rest of the script scope via a closure variable
+
+	const hemi = new BABYLON.HemisphericLight(
+		'hemi',
+		new BABYLON.Vector3(0, 1, 0),
+		scene
+	);
+	hemi.intensity = 0.9;
+
+	const dir = new BABYLON.DirectionalLight(
+		'dir',
+		new BABYLON.Vector3(-0.5, -1, -0.5),
+		scene
+	);
+	dir.intensity = 0.7;
+
+	// Load the GLB model named pong.glb in the same folder
+	const modelUrl = 'pong.glb';
+
+	function computeSceneBoundingInfo(meshes) {
+		if (!meshes || meshes.length === 0) return null;
+		let min = new BABYLON.Vector3(
+			Number.POSITIVE_INFINITY,
+			Number.POSITIVE_INFINITY,
+			Number.POSITIVE_INFINITY
+		);
+		let max = new BABYLON.Vector3(
+			Number.NEGATIVE_INFINITY,
+			Number.NEGATIVE_INFINITY,
+			Number.NEGATIVE_INFINITY
+		);
+
+		meshes.forEach(mesh => {
+			if (!mesh.getBoundingInfo) return;
+			const boundingInfo = mesh.getBoundingInfo();
+			const bMin = boundingInfo.boundingBox.minimumWorld;
+			const bMax = boundingInfo.boundingBox.maximumWorld;
+			min = BABYLON.Vector3.Minimize(min, bMin);
+			max = BABYLON.Vector3.Maximize(max, bMax);
+		});
+
+		return { min, max };
+	}
+
+	BABYLON.SceneLoader.Append(
+		'',
+		modelUrl,
+		scene,
+		function (scene) {
+			// When loaded, compute bounds and position camera
+			const loadedMeshes = scene.meshes.filter(
+				m => m && m.getTotalVertices && m.getTotalVertices() > 0
+			);
+			const bounds = computeSceneBoundingInfo(
+				loadedMeshes.length ? loadedMeshes : scene.meshes
+			);
+			if (bounds) {
+				const size = bounds.max.subtract(bounds.min);
+				const center = bounds.min.add(size.scale(0.5));
+				// move camera target to center (apply optional vertical offset)
+				const targetWithY = center.clone();
+				targetWithY.y += DEFAULT_CAMERA_TARGET_Y;
+				camera.setTarget(targetWithY);
+
+				// fit camera radius to the bounding sphere for a nice view
+				const radius = Math.max(size.length() * 0.6, 1.5);
+				// Force a visibly farther view: respect DEFAULT_CAMERA_RADIUS and apply multiplier
+				const chosen = Math.max(radius, DEFAULT_CAMERA_RADIUS);
+				camera.radius = chosen;
+				console.log(
+					'computed radius',
+					radius,
+					'chosen camera.radius',
+					chosen,
+					'camera.target',
+					camera.target
+				);
+			}
+
+			// make sure shadows/lighting update
+			scene.render();
+		},
+		null,
+		function (scene, message) {
+			console.error('Error loading model:', message);
+		}
+	);
+
+	// Paddle controls
+	let paddle1 = null;
+	let paddle2 = null;
+	let boundsXMin = null;
+	let boundsXMax = null;
+
+	// Authoritative paddle positions (can be driven by server or other scripts)
+	window.gameState = window.gameState || {
+		paddle1_x: undefined,
+		paddle2_x: undefined,
+	};
+
+	// Key state flags
+	const keyState = {
+		p1Left: false,
+		p1Right: false,
+		p2Left: false,
+		p2Right: false,
+	};
+
+	// Movement speed is defined in the centralized config above (PADDLE_SPEED)
+
+	// Helper: try to find paddles by name heuristics after model load
+	function findPaddlesFromScene(s) {
+		const meshes = s.meshes || [];
+		// case-insensitive name search for 'paddle'
+		const paddleMeshes = meshes.filter(
+			m => m && m.name && /paddle/i.test(m.name)
+		);
+		if (paddleMeshes.length >= 2) {
+			paddle1 = paddleMeshes[0];
+			paddle2 = paddleMeshes[1];
+		} else if (paddleMeshes.length === 1) {
+			paddle1 = paddleMeshes[0];
+			// try to pick another common name
+			paddle2 =
+				meshes.find(
+					m => m && m.name && /paddle2|player2|p2/i.test(m.name)
+				) || null;
+		} else {
+			// fallback: look for common names
+			paddle1 =
+				meshes.find(
+					m => m && m.name && /paddle1|player1|p1/i.test(m.name)
+				) || null;
+			paddle2 =
+				meshes.find(
+					m => m && m.name && /paddle2|player2|p2/i.test(m.name)
+				) || null;
+		}
+
+		if (!paddle1 || !paddle2) {
+			console.warn(
+				'Could not find two paddle meshes by name. Found:',
+				paddle1 && paddle1.name,
+				paddle2 && paddle2.name
+			);
+		} else {
+			console.log('Paddles found:', paddle1.name, paddle2.name);
+			// initialize authoritative positions if not set
+			if (
+				window.gameState.paddle1_x === undefined ||
+				window.gameState.paddle1_x === null
+			)
+				window.gameState.paddle1_x = paddle1.position.x;
+			if (
+				window.gameState.paddle2_x === undefined ||
+				window.gameState.paddle2_x === null
+			)
+				window.gameState.paddle2_x = paddle2.position.x;
+			// clamp initial positions to configured symmetric range
+			if (typeof window.PADDLE_RANGE === 'number') {
+				const r = window.PADDLE_RANGE;
+				window.gameState.paddle1_x = Math.max(
+					-r,
+					Math.min(r, window.gameState.paddle1_x)
+				);
+				window.gameState.paddle2_x = Math.max(
+					-r,
+					Math.min(r, window.gameState.paddle2_x)
+				);
+			}
+			// Hide duplicate/static paddle meshes that are colocated with our chosen paddles
+			try {
+				const allPaddles = meshes.filter(
+					m => m && m.name && /paddle/i.test(m.name)
+				);
+				const hidden = [];
+				const EPS = 0.1; // meters
+				allPaddles.forEach(m => {
+					if (!m || m === paddle1 || m === paddle2) return;
+					if (!m.position) return;
+					// compare distance to paddle1 and paddle2
+					const d1 =
+						paddle1 && paddle1.position
+							? BABYLON.Vector3.Distance(
+									m.position,
+									paddle1.position
+								)
+							: Number.POSITIVE_INFINITY;
+					const d2 =
+						paddle2 && paddle2.position
+							? BABYLON.Vector3.Distance(
+									m.position,
+									paddle2.position
+								)
+							: Number.POSITIVE_INFINITY;
+					if (d1 < EPS || d2 < EPS) {
+						m.isVisible = false;
+						try {
+							m.setEnabled && m.setEnabled(false);
+						} catch (e) {}
+						hidden.push(m.name || '<unnamed>');
+					}
+				});
+				if (hidden.length)
+					console.log('Hidden duplicate paddle meshes:', hidden);
+			} catch (err) {
+				console.warn('Error while hiding duplicate paddles:', err);
+			}
+		}
+	}
+
+	// Render loop with paddle movement update
+	engine.runRenderLoop(function () {
+		const dt = engine.getDeltaTime() / 1000; // seconds
+
+		// compute bounds from scene if available
+		if (boundsXMin === null || boundsXMax === null) {
+			try {
+				const allMeshes = scene.meshes;
+				const info = (function (meshes) {
+					if (!meshes || meshes.length === 0) return null;
+					let min = new BABYLON.Vector3(
+						Number.POSITIVE_INFINITY,
+						Number.POSITIVE_INFINITY,
+						Number.POSITIVE_INFINITY
+					);
+					let max = new BABYLON.Vector3(
+						Number.NEGATIVE_INFINITY,
+						Number.NEGATIVE_INFINITY,
+						Number.NEGATIVE_INFINITY
+					);
+					meshes.forEach(mesh => {
+						if (!mesh.getBoundingInfo) return;
+						const bi = mesh.getBoundingInfo();
+						min = BABYLON.Vector3.Minimize(
+							min,
+							bi.boundingBox.minimumWorld
+						);
+						max = BABYLON.Vector3.Maximize(
+							max,
+							bi.boundingBox.maximumWorld
+						);
+					});
+					return { min, max };
+				})(allMeshes);
+
+				if (info) {
+					boundsXMin = info.min.x;
+					boundsXMax = info.max.x;
+				}
+			} catch (e) {
+				// ignore
+			}
+		}
+
+		// Update paddle1 driven by authoritative gameState
+		if (paddle1) {
+			// keyboard affects authoritative variable
+			const dir = (keyState.p1Right ? 1 : 0) - (keyState.p1Left ? 1 : 0);
+			if (dir !== 0) {
+				window.gameState.paddle1_x =
+					(window.gameState.paddle1_x || 0) + dir * PADDLE_SPEED * dt;
+			}
+			// clamp to symmetric paddle range centered at 0
+			if (typeof window.PADDLE_RANGE === 'number') {
+				const r = window.PADDLE_RANGE;
+				window.gameState.paddle1_x = Math.max(
+					-r,
+					Math.min(r, window.gameState.paddle1_x)
+				);
+			}
+			if (typeof window.gameState.paddle1_x === 'number')
+				paddle1.position.x = window.gameState.paddle1_x;
+		}
+
+		// Update paddle2 driven by authoritative gameState
+		if (paddle2) {
+			const dir = (keyState.p2Right ? 1 : 0) - (keyState.p2Left ? 1 : 0);
+			if (dir !== 0) {
+				window.gameState.paddle2_x =
+					(window.gameState.paddle2_x || 0) + dir * PADDLE_SPEED * dt;
+			}
+			// clamp to symmetric paddle range centered at 0
+			if (typeof window.PADDLE_RANGE === 'number') {
+				const r = window.PADDLE_RANGE;
+				window.gameState.paddle2_x = Math.max(
+					-r,
+					Math.min(r, window.gameState.paddle2_x)
+				);
+			}
+			if (typeof window.gameState.paddle2_x === 'number')
+				paddle2.position.x = window.gameState.paddle2_x;
+		}
+
+		scene.render();
+		try {
+			maybeLogPaddles(performance.now());
+		} catch (e) {
+			/* ignore in older browsers */
+		}
+	});
+
+	// Periodic paddle logging
+	function maybeLogPaddles(now) {
+		if (!window.debugPaddleLogging) return;
+		if (now - _lastPaddleLog < PADDLE_LOG_INTERVAL) return;
+		_lastPaddleLog = now;
+		console.log(
+			'paddle1_x=',
+			window.gameState.paddle1_x,
+			'paddle2_x=',
+			window.gameState.paddle2_x
+		);
+	}
+
+	window.togglePaddleLogging = function (enabled) {
+		if (typeof enabled === 'boolean') window.debugPaddleLogging = enabled;
+		else window.debugPaddleLogging = !window.debugPaddleLogging;
+		console.log('debugPaddleLogging ->', window.debugPaddleLogging);
+	};
+
+	// Keyboard handlers
+	window.addEventListener('keydown', function (e) {
+		const k = e.key;
+		// paddle1: a,w -> left ; d,s -> right
+		if (k === 'a' || k === 'A' || k === 'w' || k === 'W')
+			keyState.p1Left = true;
+		if (k === 'd' || k === 'D' || k === 's' || k === 'S')
+			keyState.p1Right = true;
+
+		// paddle2: ArrowLeft/ArrowUp -> left ; ArrowRight/ArrowDown -> right
+		if (k === 'ArrowLeft' || k === 'ArrowUp') keyState.p2Left = true;
+		if (k === 'ArrowRight' || k === 'ArrowDown') keyState.p2Right = true;
+	});
+
+	window.addEventListener('keyup', function (e) {
+		const k = e.key;
+		if (k === 'a' || k === 'A' || k === 'w' || k === 'W')
+			keyState.p1Left = false;
+		if (k === 'd' || k === 'D' || k === 's' || k === 'S')
+			keyState.p1Right = false;
+
+		if (k === 'ArrowLeft' || k === 'ArrowUp') keyState.p2Left = false;
+		if (k === 'ArrowRight' || k === 'ArrowDown') keyState.p2Right = false;
+	});
+
+	// When the model loads, attempt to find paddles
+	BABYLON.SceneLoader.Append(
+		'',
+		modelUrl,
+		scene,
+		function (s) {
+			// This Append callback already exists earlier; keep compatibility by running paddle detection here too.
+			try {
+				findPaddlesFromScene(s);
+				// expose for debugging
+				window.paddle1 = paddle1;
+				window.paddle2 = paddle2;
+			} catch (err) {
+				console.warn('Paddle detection failed:', err);
+			}
+		},
+		null,
+		function (scene, message) {
+			console.error('Error loading model:', message);
+		}
+	);
+
+	// Helper to reset authoritative paddle positions and apply immediately
+	window.resetPaddles = function (p1x = undefined, p2x = undefined) {
+		if (typeof p1x === 'number') window.gameState.paddle1_x = p1x;
+		if (typeof p2x === 'number') window.gameState.paddle2_x = p2x;
+		if (paddle1 && typeof window.gameState.paddle1_x === 'number')
+			paddle1.position.x = window.gameState.paddle1_x;
+		if (paddle2 && typeof window.gameState.paddle2_x === 'number')
+			paddle2.position.x = window.gameState.paddle2_x;
+	};
+
+	// Resize handler
+	window.addEventListener('resize', function () {
+		engine.resize();
+	});
+
+	// Double click to toggle fullscreen for the canvas
+	canvas.addEventListener('dblclick', function () {
+		if (!document.fullscreenElement) {
+			canvas
+				.requestFullscreen()
+				.catch(err => console.warn('Fullscreen failed:', err));
+		} else {
+			document.exitFullscreen();
+		}
+	});
+}();
diff --git a/frontend/src/game/Pong3D.ts b/frontend/src/game/Pong3D.ts
index d6e8b78..ea5df60 100644
--- a/frontend/src/game/Pong3D.ts
+++ b/frontend/src/game/Pong3D.ts
@@ -1,58 +1,26 @@
-// Use modular Babylon packages for better tree-shaking and smaller bundles
-import * as BABYLON from '@babylonjs/core';
-// // Register loaders (glTF, etc.) as a side-effect import
-// import '@babylonjs/loaders'; // not needed, imported in main.ts?!
-// Optional GUI package (available as BABYLON GUI namespace)
-import * as GUI from '@babylonjs/gui';
-import { createPong3DUI } from './Pong3DUI';
-import { Pong3DInput } from './Pong3DInput';
-
-// ============================================================================
-// CONFIGURATION - Easily adjustable settings
-// ============================================================================
-
-/** 
- * Set the number of players for the game (2, 3, or 4)
- * This will automatically load the appropriate model:
- * - 2 players → /pong2p.glb
- * - 3 players → /pong3p.glb  
- * - 4 players → /pong4p.glb
- */
-export const DEFAULT_PLAYER_COUNT: 2 | 3 | 4 = 2;
-
-// ============================================================================
-
-/**
- * Pong3D - A 3D Pong game engine supporting 2-4 players
- * 
- * Features:
- * - Supports 2, 3, or 4 players via constructor options
- * - Automatically loads appropriate GLB model (pong2p.glb, pong3p.glb, pong4p.glb)
- * - Automatic paddle detection by name (paddle1, paddle2, paddle3, paddle4)
- * - Uniform handling of all players through arrays
- * - Configurable camera, lighting, and game settings
- * - Integrated GUI with scores and player info
- * 
- * Usage:
- * - Specify playerCount in options: new Pong3D(container, { playerCount: 4 })
- * - Appropriate GLB model will be loaded automatically
- * - Override with modelUrlOverride if needed for custom models
- */
+import * as BABYLON from 'babylonjs';
 
 export interface Pong3DOptions {
-	importedLightScale?: number; // multiply imported light intensities by this as blender lighting comes in way too strong
-	playerCount?: 2 | 3 | 4; // Number of players (2, 3, or 4)
-	modelUrlOverride?: string; // Override automatic model selection
+	importedLightScale?: number; // multiply imported light intensities by this
+	shadowMapSize?: number; // shadow map resolution
+	shadowUseBlur?: boolean;
+	shadowBlurKernel?: number;
+	shadowBias?: number;
+	shadowLightIntensity?: number; // when creating a directional light for shadows
 }
 
-
-// Game state - simplified to arrays for uniform handling
 interface GameState {
-	paddlePositionsX: number[]; // x positions for paddles 0-3 (players 1-2 and some 3-4)
-	paddlePositionsY: number[]; // y positions for paddles 2-3 (players 3-4 in 4-player mode)
+	paddle1_x: number;
+	paddle2_x: number;
+}
+
+interface KeyState {
+	p1Left: boolean;
+	p1Right: boolean;
+	p2Left: boolean;
+	p2Right: boolean;
 }
 
-//The outer bounding box of all meshes used, helps to place default lights and cameras
 interface BoundingInfo {
 	min: BABYLON.Vector3;
 	max: BABYLON.Vector3;
@@ -63,9 +31,8 @@ export class Pong3D {
 	private scene!: BABYLON.Scene;
 	private camera!: BABYLON.ArcRotateCamera;
 	private canvas!: HTMLCanvasElement;
-	
-	// Paddle meshes - use arrays for uniform handling
-	private paddles: (BABYLON.Mesh | null)[] = [null, null, null, null];
+	private paddle1: BABYLON.Mesh | null = null;
+	private paddle2: BABYLON.Mesh | null = null;
 	private boundsXMin: number | null = null;
 	private boundsXMax: number | null = null;
 
@@ -74,31 +41,16 @@ export class Pong3D {
 	private DEFAULT_CAMERA_BETA = Math.PI / 3;
 	private DEFAULT_CAMERA_TARGET_Y = -3;
 
-	// Lighting configuration (can be overridden via constructor options or setters)
-	private importedLightScale = 0.001; //turn down blender lighting
-
-	// GUI
-	private guiTexture: GUI.AdvancedDynamicTexture | null = null;
-	
-	// Backwards compatibility UI handles
-	private score1Text: GUI.TextBlock | null = null;
-	private score2Text: GUI.TextBlock | null = null;
-	private Player1Info: GUI.TextBlock | null = null;
-	private Player2Info: GUI.TextBlock | null = null;
-	
-
-	// Extended multi-player UI handles (when UI module is used)
-	private uiPlayerNameTexts: GUI.TextBlock[] | null = null;
-	private uiPlayerScoreTexts: GUI.TextBlock[] | null = null;
-	private uiPlayerStacks: GUI.StackPanel[] | null = null;
-	private uiMovePlayerTo: ((i: number, pos: 'top'|'bottom'|'left'|'right') => void) | null = null;
-
-	// Player data - simplified to arrays for uniform handling
-	private playerNames: string[] = ['Rufus', 'Karl', 'Wouter', 'Helen'];
-	private playerScores: number[] = [0, 0, 0, 0];
-	private activePlayerCount: number = DEFAULT_PLAYER_COUNT; // Can be 2, 3, or 4
-	private initialPlayerCount: number = DEFAULT_PLAYER_COUNT; // Set at initialization, cannot be exceeded
+	// Lighting / shadow configuration (can be overridden via constructor options or setters)
+	private importedLightScale = 0.001;
+	private shadowMapSize = 1024;
+	private shadowUseBlur = false;
+	private shadowBlurKernel = 16;
+	private shadowBias = 0.0005;
+	private shadowLightIntensity = 0.9;
 
+	// keep references to created shadow generators so we can add casters later
+	private shadowGenerators: BABYLON.ShadowGenerator[] = [];
 
 	// Configurable paddle settings
 	private PADDLE_RANGE = 4.25;
@@ -109,33 +61,53 @@ export class Pong3D {
 	private readonly PADDLE_LOG_INTERVAL = 250; // ms
 	private lastPaddleLog = 0;
 
-	// Store original GLB positions for relative movement
-	private originalGLBPositions: { x: number; z: number }[] = [
-		{ x: 0, z: 0 }, { x: 0, z: 0 }, { x: 0, z: 0 }, { x: 0, z: 0 }
-	];
-
 	// Game state
 	private gameState: GameState = {
-		paddlePositionsX: [0, 0, 0, 0], // x positions for paddles 0-3 (displacement from GLB)
-		paddlePositionsY: [0, 0, 0, 0]  // y positions for paddles 0-3 (displacement from GLB)
+		paddle1_x: 0,
+		paddle2_x: 0,
 	};
 
-	// Input handler
-	private inputHandler: Pong3DInput | null = null;
-
-	/** Get the appropriate GLB model URL based on player count */
-	private getModelUrlForPlayerCount(playerCount: number): string {
-		switch (playerCount) {
-			case 2: return '/pong2p.glb';
-			case 3: return '/pong3p.glb';
-			case 4: return '/pong4p.glb';
-			default: 
-				console.warn(`Invalid player count ${playerCount}, defaulting to 2 players`);
-				return '/pong2p.glb';
+	// Key state tracking
+	private keyState: KeyState = {
+		p1Left: false,
+		p1Right: false,
+		p2Left: false,
+		p2Right: false,
+	};
+
+	constructor(container: HTMLElement, modelUrl = '/pong.glb', options?: Pong3DOptions) {
+		// Create canvas inside container
+		this.canvas = document.createElement('canvas');
+		this.canvas.style.width = '100%';
+		this.canvas.style.height = '100%';
+		container.appendChild(this.canvas);
+
+		// Initialize Babylon.js engine with alpha support
+		this.engine = new BABYLON.Engine(this.canvas, true, {
+			preserveDrawingBuffer: true,
+			stencil: true,
+			alpha: true,
+		});
+
+		this.scene = new BABYLON.Scene(this.engine);
+		// Make scene background transparent
+		this.scene.clearColor = new BABYLON.Color4(0, 0, 0, 0);
+
+		// Apply provided options
+		if (options) {
+			if (typeof options.importedLightScale === 'number') this.importedLightScale = options.importedLightScale;
+			if (typeof options.shadowMapSize === 'number') this.shadowMapSize = options.shadowMapSize;
+			if (typeof options.shadowUseBlur === 'boolean') this.shadowUseBlur = options.shadowUseBlur;
+			if (typeof options.shadowBlurKernel === 'number') this.shadowBlurKernel = options.shadowBlurKernel;
+			if (typeof options.shadowBias === 'number') this.shadowBias = options.shadowBias;
+			if (typeof options.shadowLightIntensity === 'number') this.shadowLightIntensity = options.shadowLightIntensity;
 		}
+
+		this.setupCamera();
+		this.setupEventListeners();
+		this.loadModel(modelUrl);
 	}
 
-	/** Initialize camera */
 	private setupCamera(): void {
 		this.camera = new BABYLON.ArcRotateCamera(
 			'cam',
@@ -156,45 +128,66 @@ export class Pong3D {
 		this.camera.keysRight = [];
 	}
 
+
+
 	private setupEventListeners(): void {
-		// Initialize input handler - it will manage keyboard and canvas events
-		this.inputHandler = new Pong3DInput(this.canvas);
+		// Keyboard event listeners
+		window.addEventListener('keydown', e => this.handleKeyDown(e));
+		window.addEventListener('keyup', e => this.handleKeyUp(e));
+
+		// Resize handler
 		window.addEventListener('resize', () => this.engine.resize());
+
+		// Double click for fullscreen
+		this.canvas.addEventListener('dblclick', () => this.toggleFullscreen());
 	}
 
-	constructor(container: HTMLElement, options?: Pong3DOptions) {
-		// Set player count and determine model URL
-		this.activePlayerCount = options?.playerCount || DEFAULT_PLAYER_COUNT;
-		this.initialPlayerCount = this.activePlayerCount; // Store initial count
-		const modelUrl = options?.modelUrlOverride || this.getModelUrlForPlayerCount(this.activePlayerCount);
-		
-		console.log(`Initializing Pong3D for ${this.activePlayerCount} players with model: ${modelUrl}`);
+	private handleKeyDown(e: KeyboardEvent): void {
+		const k = e.key;
 
-		// Create canvas inside container
-		this.canvas = document.createElement('canvas');
-		this.canvas.style.width = '100%';
-		this.canvas.style.height = '100%';
-		container.appendChild(this.canvas);
+		// Paddle1: a,w -> left; d,s -> right
+		if (k === 'a' || k === 'A' || k === 'w' || k === 'W') {
+			this.keyState.p1Left = true;
+		}
+		if (k === 'd' || k === 'D' || k === 's' || k === 'S') {
+			this.keyState.p1Right = true;
+		}
 
-		// Initialize Babylon.js engine with alpha support
-		this.engine = new BABYLON.Engine(this.canvas, true, {
-			preserveDrawingBuffer: true,
-			stencil: true,
-			alpha: true,
-		});
+		// Paddle2: ArrowLeft/ArrowUp -> left; ArrowRight/ArrowDown -> right
+		if (k === 'ArrowLeft' || k === 'ArrowUp') {
+			this.keyState.p2Left = true;
+		}
+		if (k === 'ArrowRight' || k === 'ArrowDown') {
+			this.keyState.p2Right = true;
+		}
+	}
 
-		this.scene = new BABYLON.Scene(this.engine);
-		// Make scene background transparent
-		this.scene.clearColor = new BABYLON.Color4(0, 0, 0, 0);
+	private handleKeyUp(e: KeyboardEvent): void {
+		const k = e.key;
 
-		// Apply provided options
-		if (options) {
-			if (typeof options.importedLightScale === 'number') this.importedLightScale = options.importedLightScale;
+		if (k === 'a' || k === 'A' || k === 'w' || k === 'W') {
+			this.keyState.p1Left = false;
+		}
+		if (k === 'd' || k === 'D' || k === 's' || k === 'S') {
+			this.keyState.p1Right = false;
 		}
 
-		this.setupCamera();
-		this.setupEventListeners();
-		this.loadModel(modelUrl);
+		if (k === 'ArrowLeft' || k === 'ArrowUp') {
+			this.keyState.p2Left = false;
+		}
+		if (k === 'ArrowRight' || k === 'ArrowDown') {
+			this.keyState.p2Right = false;
+		}
+	}
+
+	private toggleFullscreen(): void {
+		if (!document.fullscreenElement) {
+			this.canvas
+				.requestFullscreen()
+				.catch(err => console.warn('Fullscreen failed:', err));
+		} else {
+			document.exitFullscreen();
+		}
 	}
 
 	private loadModel(modelUrl: string): void {
@@ -207,7 +200,7 @@ export class Pong3D {
 				this.startRenderLoop();
 			},
 			null,
-			(_scene, message) => console.error('Error loading model:', message)
+			(scene, message) => console.error('Error loading model:', message)
 		);
 	}
 
@@ -246,14 +239,7 @@ export class Pong3D {
 
 		this.findPaddles(scene);
 
-		// Setup GUI after model is loaded
-		try {
-			this.setupGui();
-		} catch (e) {
-			console.warn('GUI setup failed:', e);
-		}
-
-		// Reduce intensity of imported lights
+		// Reduce intensity of imported lights (Blender lights are often much brighter in Babylon)
 		try {
 			scene.lights.forEach(light => {
 				if (light && typeof (light as any).intensity === 'number') {
@@ -265,6 +251,93 @@ export class Pong3D {
 			console.warn('Could not adjust light intensities:', e);
 		}
 
+
+		// --- Shadow setup: ensure objects can cast and receive shadows ---
+		try {
+			// Prefer to create per-spotlight shadow generators if the scene contains SpotLights
+			const spotLights = scene.lights.filter(l => l instanceof BABYLON.SpotLight) as BABYLON.SpotLight[];
+
+			// helper to detect meshes that should cast/receive shadows (include small objects)
+			const shouldBeCaster = (m: BABYLON.AbstractMesh) => {
+				if (!m) return false;
+				if (m.name && /paddle|ball|player|cube|box|board|table|small|prop/i.test(m.name)) return true;
+				if (typeof (m as any).getTotalVertices === 'function') {
+					try { return (m as any).getTotalVertices() > 0; } catch (e) { return false; }
+				}
+				return false;
+			};
+
+			const allMeshes = scene.meshes.slice();
+
+			if (spotLights.length > 0) {
+				// For each spotlight, create a shadow generator tuned for hard shadows
+				spotLights.forEach((sl, idx) => {
+					try {
+						const size = Math.max(this.shadowMapSize, 2048);
+						const sg = new BABYLON.ShadowGenerator(size, sl);
+						// Hard shadows: disable blur/poisson/VSM
+						sg.usePoissonSampling = false;
+						sg.useBlurExponentialShadowMap = false;
+						sg.useExponentialShadowMap = false;
+						// minimal kernel for sharp edges
+						sg.blurKernel = 1;
+						sg.bias = this.shadowBias;
+						// Add casters and enable receivers on scene meshes
+						allMeshes.forEach(m => {
+							try {
+								if (shouldBeCaster(m)) {
+									sg.addShadowCaster(m as BABYLON.AbstractMesh, true);
+								}
+								try { (m as any).receiveShadows = true; } catch (e) {}
+							} catch (e) {}
+						});
+						// ensure known game objects (paddles/ball) are registered as casters too
+						if (this.paddle1) { try { sg.addShadowCaster(this.paddle1, true); (this.paddle1 as any).receiveShadows = true; } catch (e) {} }
+						if (this.paddle2) { try { sg.addShadowCaster(this.paddle2, true); (this.paddle2 as any).receiveShadows = true; } catch (e) {} }
+						const ball = scene.getMeshByName('ball') || scene.getMeshByName('Ball');
+						if (ball) { try { sg.addShadowCaster(ball as BABYLON.AbstractMesh, true); (ball as any).receiveShadows = true; } catch (e) {} }
+						this.shadowGenerators.push(sg);
+						console.log('Created spot shadow generator', idx, 'size', size);
+					} catch (e) {
+						console.warn('Failed to create spot shadow generator for', sl.name, e);
+					}
+				});
+			} else {
+				// Fallback: use or create a directional light as before, but tune for harder shadows
+				let shadowLight: BABYLON.DirectionalLight | null = null;
+				const existingDir = scene.lights.find(l => l instanceof BABYLON.DirectionalLight) as BABYLON.DirectionalLight | undefined;
+				if (existingDir) {
+					shadowLight = existingDir;
+					if (!shadowLight.position) shadowLight.position = new BABYLON.Vector3(0, 10, 0);
+				} else {
+					shadowLight = new BABYLON.DirectionalLight('shadowLight', new BABYLON.Vector3(-0.5, -1, -0.5), scene);
+					shadowLight.position = new BABYLON.Vector3(0, 10, 0);
+					shadowLight.intensity = this.shadowLightIntensity;
+				}
+
+				const shadowGen = new BABYLON.ShadowGenerator(this.shadowMapSize, shadowLight);
+				shadowGen.usePoissonSampling = false;
+				shadowGen.useBlurExponentialShadowMap = !!this.shadowUseBlur;
+				if (this.shadowUseBlur) shadowGen.blurKernel = this.shadowBlurKernel;
+				shadowGen.bias = this.shadowBias;
+				allMeshes.forEach(m => {
+					try {
+						if (shouldBeCaster(m)) shadowGen.addShadowCaster(m as BABYLON.AbstractMesh, true);
+						try { (m as any).receiveShadows = true; } catch (e) {}
+					} catch (e) {}
+				});
+				// register known objects
+				if (this.paddle1) { try { shadowGen.addShadowCaster(this.paddle1, true); (this.paddle1 as any).receiveShadows = true; } catch (e) {} }
+				if (this.paddle2) { try { shadowGen.addShadowCaster(this.paddle2, true); (this.paddle2 as any).receiveShadows = true; } catch (e) {} }
+				const ball = scene.getMeshByName('ball') || scene.getMeshByName('Ball');
+				if (ball) { try { shadowGen.addShadowCaster(ball as BABYLON.AbstractMesh, true); (ball as any).receiveShadows = true; } catch (e) {} }
+				this.shadowGenerators.push(shadowGen);
+				console.log('Directional shadow generator created, casters registered');
+			}
+		} catch (e) {
+			console.warn('Shadow setup failed:', e);
+		}
+
 		scene.render();
 	}
 
@@ -299,74 +372,59 @@ export class Pong3D {
 	private findPaddles(scene: BABYLON.Scene): void {
 		const meshes = scene.meshes;
 
-		// Find all paddle meshes using case-insensitive name search
+		// Case-insensitive name search for 'paddle'
 		const paddleMeshes = meshes.filter(
 			m => m && m.name && /paddle/i.test(m.name)
 		);
 
-		// Try to identify paddles by numbered names for the expected number of players
-		for (let i = 0; i < this.activePlayerCount; i++) {
-			const paddleNumber = i + 1;
-			// Look for specific numbered paddle names first
-			let paddle = paddleMeshes.find(m => 
-				m && m.name && new RegExp(`paddle${paddleNumber}|player${paddleNumber}|p${paddleNumber}`, 'i').test(m.name)
-			) as BABYLON.Mesh | undefined;
-			
-			// If no specific numbered paddle found, take the next available paddle
-			if (!paddle && i < paddleMeshes.length) {
-				paddle = paddleMeshes[i] as BABYLON.Mesh;
-			}
-			
-			this.paddles[i] = paddle || null;
-		}
-
-		// Clear unused paddle slots
-		for (let i = this.activePlayerCount; i < 4; i++) {
-			this.paddles[i] = null;
+		if (paddleMeshes.length >= 2) {
+			this.paddle1 = paddleMeshes[0] as BABYLON.Mesh;
+			this.paddle2 = paddleMeshes[1] as BABYLON.Mesh;
+		} else if (paddleMeshes.length === 1) {
+			this.paddle1 = paddleMeshes[0] as BABYLON.Mesh;
+			// Try to pick another common name
+			this.paddle2 =
+				(meshes.find(
+					m => m && m.name && /paddle2|player2|p2/i.test(m.name)
+				) as BABYLON.Mesh) || null;
+		} else {
+			// Fallback: look for common names
+			this.paddle1 =
+				(meshes.find(
+					m => m && m.name && /paddle1|player1|p1/i.test(m.name)
+				) as BABYLON.Mesh) || null;
+			this.paddle2 =
+				(meshes.find(
+					m => m && m.name && /paddle2|player2|p2/i.test(m.name)
+				) as BABYLON.Mesh) || null;
 		}
 
-		// Log what we found
-		const foundPaddles = this.paddles.filter(p => p !== null);
-		console.log(`Found ${foundPaddles.length}/${this.activePlayerCount} expected paddles:`, foundPaddles.map(p => p?.name));
+		if (!this.paddle1 || !this.paddle2) {
+			console.warn(
+				'Could not find two paddle meshes by name. Found:',
+				this.paddle1?.name,
+				this.paddle2?.name
+			);
+		} else {
+			console.log('Paddles found:', this.paddle1.name, this.paddle2.name);
 
-		if (foundPaddles.length === 0) {
-			console.warn('No paddle meshes found in the scene!');
-			return;
-		}
+			// Initialize authoritative positions
+			this.gameState.paddle1_x = this.paddle1.position.x;
+			this.gameState.paddle2_x = this.paddle2.position.x;
 
-		if (foundPaddles.length < this.activePlayerCount) {
-			console.warn(`Expected ${this.activePlayerCount} paddles but only found ${foundPaddles.length}`);
-		}
-
-		// Initialize paddle positions from their mesh positions
-		for (let i = 0; i < this.activePlayerCount; i++) {
-			if (this.paddles[i]) {
-				// Store original GLB position for relative movement
-				this.originalGLBPositions[i] = {
-					x: this.paddles[i]!.position.x,
-					z: this.paddles[i]!.position.z
-				};
-				
-				// Initialize gameState as displacement from GLB position (starting at 0)
-				this.gameState.paddlePositionsX[i] = 0;
-				this.gameState.paddlePositionsY[i] = 0;
-			} else {
-				// Default position for missing paddles
-				this.originalGLBPositions[i] = { x: 0, z: 0 };
-				this.gameState.paddlePositionsX[i] = 0;
-				this.gameState.paddlePositionsY[i] = 0;
-			}
-		}
+			// Clamp initial positions to configured symmetric range
+			this.gameState.paddle1_x = Math.max(
+				-this.PADDLE_RANGE,
+				Math.min(this.PADDLE_RANGE, this.gameState.paddle1_x)
+			);
+			this.gameState.paddle2_x = Math.max(
+				-this.PADDLE_RANGE,
+				Math.min(this.PADDLE_RANGE, this.gameState.paddle2_x)
+			);
 
-		// Sync mesh positions with the original GLB positions (since gameState starts at 0 displacement)
-		for (let i = 0; i < this.activePlayerCount; i++) {
-			if (this.paddles[i]) {
-				this.paddles[i]!.position.x = this.originalGLBPositions[i].x;
-				this.paddles[i]!.position.z = this.originalGLBPositions[i].z;
-			}
+			// Hide duplicate paddle meshes
+			this.hideDuplicatePaddles(meshes);
 		}
-
-		this.hideDuplicatePaddles(meshes);
 	}
 
 	private hideDuplicatePaddles(meshes: BABYLON.AbstractMesh[]): void {
@@ -378,17 +436,26 @@ export class Pong3D {
 			const EPS = 0.1; // meters
 
 			allPaddles.forEach(m => {
-				if (!m || this.paddles.includes(m as BABYLON.Mesh)) return;
+				if (!m || m === this.paddle1 || m === this.paddle2) return;
 				if (!m.position) return;
 
-				// Compare distance to all active paddles
-				const isDuplicate = this.paddles.some(paddle => {
-					if (!paddle || !paddle.position) return false;
-					const distance = BABYLON.Vector3.Distance(m.position, paddle.position);
-					return distance < EPS;
-				});
-
-				if (isDuplicate) {
+				// Compare distance to paddle1 and paddle2
+				const d1 =
+					this.paddle1 && this.paddle1.position
+						? BABYLON.Vector3.Distance(
+								m.position,
+								this.paddle1.position
+							)
+						: Number.POSITIVE_INFINITY;
+				const d2 =
+					this.paddle2 && this.paddle2.position
+						? BABYLON.Vector3.Distance(
+								m.position,
+								this.paddle2.position
+							)
+						: Number.POSITIVE_INFINITY;
+
+				if (d1 < EPS || d2 < EPS) {
 					m.isVisible = false;
 					try {
 						if (
@@ -413,9 +480,6 @@ export class Pong3D {
 	}
 
 	private startRenderLoop(): void {
-		// If GUI has hooked into the render loop, it replaced runRenderLoop itself.
-		if (this.guiTexture) return;
-
 		this.engine.runRenderLoop(() => {
 			const dt = this.engine.getDeltaTime() / 1000; // seconds
 
@@ -427,160 +491,6 @@ export class Pong3D {
 		});
 	}
 
-	/** Create a simple GUI overlay with scores and optional FPS */
-	private setupGui(): void {
-		if (this.guiTexture) return;
-		const handles = createPong3DUI(this.scene, {
-			playerNames: [...this.playerNames],
-			playerScores: [...this.playerScores],
-		});
-
-		this.guiTexture = handles.guiTexture;
-		// store array handles for multi-player updates
-		this.uiPlayerNameTexts = handles.playerNameTexts;
-		this.uiPlayerScoreTexts = handles.playerScoreTexts;
-		this.uiPlayerStacks = handles.playerStacks;
-		this.uiMovePlayerTo = handles.movePlayerTo;
-
-		// Position player info blocks based on active player count and court layout
-		this.positionPlayerInfoBlocks();
-
-		// Backwards-compat convenience: point single-player fields to first two players if available
-		if (this.uiPlayerNameTexts && this.uiPlayerNameTexts.length > 0) this.Player1Info = this.uiPlayerNameTexts[0];
-		if (this.uiPlayerScoreTexts && this.uiPlayerScoreTexts.length > 0) this.score1Text = this.uiPlayerScoreTexts[0];
-		if (this.uiPlayerNameTexts && this.uiPlayerNameTexts.length > 1) this.Player2Info = this.uiPlayerNameTexts[1];
-		if (this.uiPlayerScoreTexts && this.uiPlayerScoreTexts.length > 1) this.score2Text = this.uiPlayerScoreTexts[1];
-
-		// Keep a simple render loop that updates the scene
-		this.engine.runRenderLoop(() => {
-			const dt = this.engine.getDeltaTime() / 1000;
-			this.updateBounds();
-			this.updatePaddles(dt);
-			this.scene.render();
-			this.maybeLogPaddles();
-		});
-	}
-
-	/**
-	 * Position player info blocks based on active player count and court layout:
-	 * - 2 players: Player 1 = bottom, Player 2 = top
-	 * - 3 players: Player 1 = bottom, Player 2 = right, Player 3 = left  
-	 * - 4 players: Player 1 = bottom, Player 2 = top, Player 3 = right, Player 4 = left
-	 * - Inactive players are hidden
-	 * Note: Left and right positioning styles are consistent across player counts
-	 */
-	private positionPlayerInfoBlocks(): void {
-		if (!this.uiMovePlayerTo || !this.uiPlayerStacks) return;
-
-		// Hide all players first
-		for (let i = 0; i < this.uiPlayerStacks.length; i++) {
-			this.uiPlayerStacks[i].isVisible = false;
-		}
-
-		if (this.activePlayerCount === 2) {
-			// 2-player mode: Player 1 bottom, Player 2 top
-			this.uiMovePlayerTo(0, 'bottom'); // Player 1
-			this.uiMovePlayerTo(1, 'top');    // Player 2
-			this.uiPlayerStacks[0].isVisible = true;
-			this.uiPlayerStacks[1].isVisible = true;
-		} else if (this.activePlayerCount === 3) {
-			// 3-player mode: Player 1 bottom, Player 2 right, Player 3 left
-			this.uiMovePlayerTo(0, 'bottom'); // Player 1
-			this.uiMovePlayerTo(1, 'right');  // Player 2
-			this.uiMovePlayerTo(2, 'left');   // Player 3
-			this.uiPlayerStacks[0].isVisible = true;
-			this.uiPlayerStacks[1].isVisible = true;
-			this.uiPlayerStacks[2].isVisible = true;
-		} else if (this.activePlayerCount === 4) {
-			// 4-player mode: Player 1 bottom, Player 2 top, Player 3 right, Player 4 left
-			this.uiMovePlayerTo(0, 'bottom'); // Player 1
-			this.uiMovePlayerTo(1, 'top');    // Player 2
-			this.uiMovePlayerTo(2, 'right');  // Player 3
-			this.uiMovePlayerTo(3, 'left');   // Player 4
-			this.uiPlayerStacks[0].isVisible = true;
-			this.uiPlayerStacks[1].isVisible = true;
-			this.uiPlayerStacks[2].isVisible = true;
-			this.uiPlayerStacks[3].isVisible = true;
-		}
-
-		// Force a re-layout to ensure all positioning changes take effect
-		if (this.guiTexture) {
-			this.guiTexture.markAsDirty();
-		}
-	}
-
-	/** Update displayed scores (backwards compatible) */
-	public setScores(p1: number, p2: number): void {
-		this.playerScores[0] = p1;
-		this.playerScores[1] = p2;
-		this.updatePlayerInfoDisplay();
-	}
-
-	/** Update the on-screen Player info using current name/score fields */
-	private updatePlayerInfoDisplay(): void {
-		// If extended UI is present, update arrays
-		if (this.uiPlayerNameTexts && this.uiPlayerScoreTexts) {
-			for (let i = 0; i < Math.min(this.uiPlayerNameTexts.length, this.playerNames.length); i++) {
-				this.uiPlayerNameTexts[i].text = this.playerNames[i];
-				this.uiPlayerScoreTexts[i].text = String(this.playerScores[i]);
-			}
-			return;
-		}
-
-		// Backwards compatibility for single player fields
-		if (this.Player1Info) this.Player1Info.text = this.playerNames[0];
-		if (this.score1Text) this.score1Text.text = String(this.playerScores[0]);
-		if (this.Player2Info) this.Player2Info.text = this.playerNames[1];
-		if (this.score2Text) this.score2Text.text = String(this.playerScores[1]);
-	}
-
-	/** Set player names and update display */
-	public setPlayerNames(p1: string, p2: string, p3?: string, p4?: string): void {
-		this.playerNames[0] = p1;
-		this.playerNames[1] = p2;
-		if (typeof p3 === 'string') this.playerNames[2] = p3;
-		if (typeof p4 === 'string') this.playerNames[3] = p4;
-		this.updatePlayerInfoDisplay();
-	}
-
-	/** Set active player count (2, 3, or 4) - cannot exceed initial player count */
-	public setActivePlayerCount(count: number): void {
-		const newCount = Math.max(2, Math.min(4, count));
-		
-		// Don't allow increasing beyond what was initialized
-		if (newCount > this.initialPlayerCount) {
-			console.warn(`Cannot set active player count to ${newCount}, initialized for ${this.initialPlayerCount} players only`);
-			return;
-		}
-		
-		this.activePlayerCount = newCount;
-		console.log('Active player count set to:', this.activePlayerCount);
-		
-		// Update UI positioning and visibility for new player count
-		this.positionPlayerInfoBlocks();
-	}
-
-	/** Set player scores and update display */
-	public setPlayerScores(s1: number, s2: number, s3?: number, s4?: number): void {
-		this.playerScores[0] = s1;
-		this.playerScores[1] = s2;
-		if (typeof s3 === 'number') this.playerScores[2] = s3;
-		if (typeof s4 === 'number') this.playerScores[3] = s4;
-		this.updatePlayerInfoDisplay();
-	}
-
-	/** Move a player's UI block to a named position: 'top'|'bottom'|'left'|'right' */
-	public setPlayerUIPosition(playerIndex: number, position: 'top'|'bottom'|'left'|'right') {
-		if (this.uiMovePlayerTo) this.uiMovePlayerTo(playerIndex, position);
-	}
-
-	/** Set the Player1Info text (backwards compatibility) */
-	public setPlayer1Info(text: string): void {
-		if (this.Player1Info) this.Player1Info.text = text;
-	}
-
-
-
 	private updateBounds(): void {
 		if (this.boundsXMin === null || this.boundsXMax === null) {
 			try {
@@ -598,114 +508,38 @@ export class Pong3D {
 	}
 
 	private updatePaddles(dt: number): void {
-		// Get current key state from input handler
-		const keyState = this.inputHandler?.getKeyState() || {
-			p1Left: false,
-			p1Right: false,
-			p2Left: false,
-			p2Right: false,
-			p3Left: false,
-			p3Right: false,
-			p4Left: false,
-			p4Right: false,
-		};
-
-		// Key state arrays for easy iteration
-		const leftKeys = [keyState.p1Left, keyState.p2Left, keyState.p3Left, keyState.p4Left];
-		const rightKeys = [keyState.p1Right, keyState.p2Right, keyState.p3Right, keyState.p4Right];
-
-		// Update only active paddles
-		for (let i = 0; i < this.activePlayerCount; i++) {
-			if (!this.paddles[i]) continue;
-
-			const dir = (rightKeys[i] ? 1 : 0) - (leftKeys[i] ? 1 : 0);
+		// Update paddle1
+		if (this.paddle1) {
+			const dir =
+				(this.keyState.p1Right ? 1 : 0) -
+				(this.keyState.p1Left ? 1 : 0);
 			if (dir !== 0) {
-				const movement = dir * this.PADDLE_SPEED * dt;
-
-				if (this.activePlayerCount === 4 && i >= 2) {
-					// 4-player mode: Players 3-4 move on Y-axis
-					this.gameState.paddlePositionsY[i] += movement;
-				} else if (this.activePlayerCount === 3) {
-					// 3-player triangular mode: Apply movement along the logical axis
-					// Store the logical position along each player's movement axis
-					// For 3-player mode, we track the displacement from the original GLB position
-					
-					// Get current logical position (displacement along movement axis)
-					const angles = [0, 4 * Math.PI / 3, 2 * Math.PI / 3]; // 0°, 240°, 120°
-					const angle = angles[i];
-					const cos = Math.cos(angle);
-					const sin = Math.sin(angle);
-					
-					// Get the logical position along the movement axis
-					// This represents how far the paddle has moved from its GLB position
-					let currentLogicalPos = this.gameState.paddlePositionsX[i] * cos + this.gameState.paddlePositionsY[i] * sin;
-					
-					// Apply movement along the logical axis
-					currentLogicalPos += movement;
-					
-					// Clamp the logical position
-					currentLogicalPos = Math.max(-this.PADDLE_RANGE, Math.min(this.PADDLE_RANGE, currentLogicalPos));
-					
-					// Convert back to X,Y displacement from original position
-					const deltaX = currentLogicalPos * cos;
-					const deltaY = currentLogicalPos * sin;
-					
-					// Update gameState to store the displacement
-					this.gameState.paddlePositionsX[i] = deltaX;
-					this.gameState.paddlePositionsY[i] = deltaY;
-				} else {
-					// 2-player mode or players 1-2 in 4-player mode: X-axis movement only
-					this.gameState.paddlePositionsX[i] += movement;
-				}
+				this.gameState.paddle1_x += dir * this.PADDLE_SPEED * dt;
+			}
 
-				// Apply clamping and update mesh positions ONLY when there's movement
-				if (this.activePlayerCount === 4 && i >= 2) {
-					// Clamp Y position for players 3-4 in 4-player mode
-					this.gameState.paddlePositionsY[i] = Math.max(
-						-this.PADDLE_RANGE,
-						Math.min(this.PADDLE_RANGE, this.gameState.paddlePositionsY[i])
-					);
-					// Update mesh Y position relative to original GLB position
-					this.paddles[i]!.position.x = this.originalGLBPositions[i].x;
-					this.paddles[i]!.position.z = this.originalGLBPositions[i].z + this.gameState.paddlePositionsY[i];
-				} else if (this.activePlayerCount === 3) {
-					// For 3-player mode, clamp position along the rotated axis
-					const angles = [0, 4 * Math.PI / 3, 2 * Math.PI / 3]; // 0°, 240°, 120°
-					const angle = angles[i];
-					const cos = Math.cos(angle);
-					const sin = Math.sin(angle);
-					
-					// Get current position in 2D
-					const x = this.gameState.paddlePositionsX[i];
-					const y = this.gameState.paddlePositionsY[i];
-					
-					// Project to 1D along the rotated axis
-					const projectedPosition = x * cos + y * sin;
-					
-					// Clamp the projected position
-					const clampedProjection = Math.max(
-						-this.PADDLE_RANGE,
-						Math.min(this.PADDLE_RANGE, projectedPosition)
-					);
-					
-					// Convert back to 2D coordinates
-					this.gameState.paddlePositionsX[i] = clampedProjection * cos;
-					this.gameState.paddlePositionsY[i] = clampedProjection * sin;
-					
-					// Update mesh positions relative to original GLB positions
-					this.paddles[i]!.position.x = this.originalGLBPositions[i].x + this.gameState.paddlePositionsX[i];
-					this.paddles[i]!.position.z = this.originalGLBPositions[i].z + this.gameState.paddlePositionsY[i];
-				} else {
-					// Clamp X position for 2-player mode or players 1-2 in 4-player mode
-					this.gameState.paddlePositionsX[i] = Math.max(
-						-this.PADDLE_RANGE,
-						Math.min(this.PADDLE_RANGE, this.gameState.paddlePositionsX[i])
-					);
-					// Update mesh X position relative to original GLB position
-					this.paddles[i]!.position.x = this.originalGLBPositions[i].x + this.gameState.paddlePositionsX[i];
-					this.paddles[i]!.position.z = this.originalGLBPositions[i].z;
-				}
+			// Clamp to symmetric paddle range
+			this.gameState.paddle1_x = Math.max(
+				-this.PADDLE_RANGE,
+				Math.min(this.PADDLE_RANGE, this.gameState.paddle1_x)
+			);
+			this.paddle1.position.x = this.gameState.paddle1_x;
+		}
+
+		// Update paddle2
+		if (this.paddle2) {
+			const dir =
+				(this.keyState.p2Right ? 1 : 0) -
+				(this.keyState.p2Left ? 1 : 0);
+			if (dir !== 0) {
+				this.gameState.paddle2_x += dir * this.PADDLE_SPEED * dt;
 			}
+
+			// Clamp to symmetric paddle range
+			this.gameState.paddle2_x = Math.max(
+				-this.PADDLE_RANGE,
+				Math.min(this.PADDLE_RANGE, this.gameState.paddle2_x)
+			);
+			this.paddle2.position.x = this.gameState.paddle2_x;
 		}
 	}
 
@@ -716,9 +550,12 @@ export class Pong3D {
 		if (now - this.lastPaddleLog < this.PADDLE_LOG_INTERVAL) return;
 
 		this.lastPaddleLog = now;
-		const activePositionsX = this.gameState.paddlePositionsX.slice(0, this.activePlayerCount);
-		const activePositionsY = this.gameState.paddlePositionsY.slice(0, this.activePlayerCount);
-		console.log('Active paddle positions X:', activePositionsX, 'Y:', activePositionsY);
+		console.log(
+			'paddle1_x=',
+			this.gameState.paddle1_x,
+			'paddle2_x=',
+			this.gameState.paddle2_x
+		);
 	}
 
 	// Public configuration methods
@@ -756,129 +593,19 @@ export class Pong3D {
 		console.log('debugPaddleLogging ->', this.debugPaddleLogging);
 	}
 
-	/** Set individual paddle position */
-	public setPaddlePosition(index: number, position: number): void {
-		if (index >= 0 && index < 4) {
-			const clampedPosition = Math.max(
-				-this.PADDLE_RANGE,
-				Math.min(this.PADDLE_RANGE, position)
-			);
-			
-			if (this.activePlayerCount === 4 && index >= 2) {
-				// 4-player mode: Players 3-4 move on Y-axis
-				this.gameState.paddlePositionsY[index] = clampedPosition;
-				if (this.paddles[index]) {
-					this.paddles[index]!.position.z = clampedPosition;
-				}
-			} else if (this.activePlayerCount === 3) {
-				// 3-player mode: Position represents movement along rotated axis
-				const angles = [0, 4 * Math.PI / 3, 2 * Math.PI / 3]; // 0°, 240°, 120°
-				const angle = angles[index];
-				const cos = Math.cos(angle);
-				const sin = Math.sin(angle);
-				
-				// Set position along the rotated axis
-				this.gameState.paddlePositionsX[index] = clampedPosition * cos;
-				this.gameState.paddlePositionsY[index] = clampedPosition * sin;
-				
-				if (this.paddles[index]) {
-					this.paddles[index]!.position.x = this.gameState.paddlePositionsX[index];
-					this.paddles[index]!.position.z = this.gameState.paddlePositionsY[index];
-				}
-			} else {
-				// 2-player mode: X-axis movement only
-				this.gameState.paddlePositionsX[index] = clampedPosition;
-				if (this.paddles[index]) {
-					this.paddles[index]!.position.x = clampedPosition;
-				}
-			}
-		}
-	}
+	public resetPaddles(p1x?: number, p2x?: number): void {
+		if (typeof p1x === 'number') this.gameState.paddle1_x = p1x;
+		if (typeof p2x === 'number') this.gameState.paddle2_x = p2x;
 
-	/** Get individual paddle position */
-	public getPaddlePosition(index: number): number {
-		// Return position from appropriate axis based on player index and mode
-		if (this.activePlayerCount === 4 && index >= 2) {
-			return this.gameState.paddlePositionsY[index] || 0;
-		} else if (this.activePlayerCount === 3) {
-			// For 3-player mode, return the position along the rotated axis
-			const angles = [0, 4 * Math.PI / 3, 2 * Math.PI / 3]; // 0°, 240°, 120°
-			const angle = angles[index];
-			const cos = Math.cos(angle);
-			const sin = Math.sin(angle);
-			const x = this.gameState.paddlePositionsX[index] || 0;
-			const y = this.gameState.paddlePositionsY[index] || 0;
-			
-			// Project the 2D position back to the 1D rotated axis
-			return x * cos + y * sin;
-		} else {
-			return this.gameState.paddlePositionsX[index] || 0;
+		if (this.paddle1 && typeof this.gameState.paddle1_x === 'number') {
+			this.paddle1.position.x = this.gameState.paddle1_x;
 		}
-	}
-
-	/** Get all paddle positions */
-	public getPaddlePositions(): number[] {
-		const positions: number[] = [];
-		for (let i = 0; i < 4; i++) {
-			if (this.activePlayerCount === 4 && i >= 2) {
-				positions[i] = this.gameState.paddlePositionsY[i];
-			} else if (this.activePlayerCount === 3) {
-				// For 3-player mode, return position along rotated axis
-				const angles = [0, 4 * Math.PI / 3, 2 * Math.PI / 3]; // 0°, 240°, 120°
-				const angle = angles[i];
-				const cos = Math.cos(angle);
-				const sin = Math.sin(angle);
-				const x = this.gameState.paddlePositionsX[i] || 0;
-				const y = this.gameState.paddlePositionsY[i] || 0;
-				positions[i] = x * cos + y * sin;
-			} else {
-				positions[i] = this.gameState.paddlePositionsX[i];
-			}
-		}
-		return positions;
-	}
-
-	public resetPaddles(positions?: number[]): void {
-		if (positions) {
-			for (let i = 0; i < Math.min(positions.length, this.activePlayerCount); i++) {
-				if (this.activePlayerCount === 4 && i >= 2) {
-					this.gameState.paddlePositionsY[i] = positions[i];
-				} else if (this.activePlayerCount === 3) {
-					// For 3-player mode, position represents movement along rotated axis
-					const angles = [0, 4 * Math.PI / 3, 2 * Math.PI / 3]; // 0°, 240°, 120°
-					const angle = angles[i];
-					const cos = Math.cos(angle);
-					const sin = Math.sin(angle);
-					this.gameState.paddlePositionsX[i] = positions[i] * cos;
-					this.gameState.paddlePositionsY[i] = positions[i] * sin;
-				} else {
-					this.gameState.paddlePositionsX[i] = positions[i];
-				}
-			}
-		} else {
-			// Reset active players to center
-			for (let i = 0; i < this.activePlayerCount; i++) {
-				this.gameState.paddlePositionsX[i] = 0;
-				this.gameState.paddlePositionsY[i] = 0;
-			}
-		}
-
-		// Update mesh positions for active players
-		for (let i = 0; i < this.activePlayerCount; i++) {
-			if (this.paddles[i]) {
-				if (this.activePlayerCount === 4 && i >= 2) {
-					this.paddles[i]!.position.z = this.gameState.paddlePositionsY[i];
-				} else if (this.activePlayerCount === 3) {
-					this.paddles[i]!.position.x = this.gameState.paddlePositionsX[i];
-					this.paddles[i]!.position.z = this.gameState.paddlePositionsY[i];
-				} else {
-					this.paddles[i]!.position.x = this.gameState.paddlePositionsX[i];
-				}
-			}
+		if (this.paddle2 && typeof this.gameState.paddle2_x === 'number') {
+			this.paddle2.position.x = this.gameState.paddle2_x;
 		}
 	}
 
-	// Lighting setters
+	// Lighting / shadow setters
 
 	public setImportedLightScale(factor: number): void {
 		if (typeof factor === 'number' && factor >= 0) {
@@ -887,73 +614,57 @@ export class Pong3D {
 		}
 	}
 
-	// Getters for debugging
-	public getPaddle(index: number): BABYLON.Mesh | null {
-		return this.paddles[index] || null;
+	public setShadowMapSize(size: number): void {
+		if (typeof size === 'number' && size > 0) {
+			this.shadowMapSize = Math.floor(size);
+			console.log('shadowMapSize ->', this.shadowMapSize);
+		}
 	}
 
-	public getPaddles(): (BABYLON.Mesh | null)[] {
-		return [...this.paddles];
+	public setShadowUseBlur(enabled: boolean): void {
+		this.shadowUseBlur = !!enabled;
+		console.log('shadowUseBlur ->', this.shadowUseBlur);
 	}
 
-	public getGameState(): GameState {
-		return { 
-			paddlePositionsX: [...this.gameState.paddlePositionsX],
-			paddlePositionsY: [...this.gameState.paddlePositionsY]
-		};
+	public setShadowBlurKernel(kernel: number): void {
+		if (typeof kernel === 'number' && kernel >= 0) {
+			this.shadowBlurKernel = Math.floor(kernel);
+			console.log('shadowBlurKernel ->', this.shadowBlurKernel);
+		}
 	}
 
-	/** Get player names */
-	public getPlayerNames(): string[] {
-		return [...this.playerNames];
+	public setShadowBias(bias: number): void {
+		if (typeof bias === 'number') {
+			this.shadowBias = bias;
+			console.log('shadowBias ->', this.shadowBias);
+		}
 	}
 
-	/** Get player scores */
-	public getPlayerScores(): number[] {
-		return [...this.playerScores];
+	public setShadowLightIntensity(i: number): void {
+		if (typeof i === 'number') {
+			this.shadowLightIntensity = i;
+			console.log('shadowLightIntensity ->', this.shadowLightIntensity);
+		}
 	}
 
-	/** Get active player count */
-	public getActivePlayerCount(): number {
-		return this.activePlayerCount;
+	// Getters for debugging
+	public getPaddle1(): BABYLON.Mesh | null {
+		return this.paddle1;
 	}
 
-	/** Get initial player count (max possible) */
-	public getInitialPlayerCount(): number {
-		return this.initialPlayerCount;
+	public getPaddle2(): BABYLON.Mesh | null {
+		return this.paddle2;
 	}
 
-	/** Check if a player index is active */
-	public isPlayerActive(index: number): boolean {
-		return index >= 0 && index < this.activePlayerCount;
+	public getGameState(): GameState {
+		return { ...this.gameState };
 	}
 
 	// Cleanup method
 	public dispose(): void {
-		// Clean up input handler
-		if (this.inputHandler) {
-			this.inputHandler.cleanup();
-			this.inputHandler = null;
-		}
-		
 		this.engine.dispose();
 		if (this.canvas.parentElement) {
 			this.canvas.parentElement.removeChild(this.canvas);
 		}
 	}
 }
-
-// ============================================================================
-// CONVENIENCE FUNCTIONS
-// ============================================================================
-
-/**
- * Create a Pong3D instance with the default player count configuration
- * This is a shorthand for: new Pong3D(container, { playerCount: DEFAULT_PLAYER_COUNT })
- */
-export function createPong3D(container: HTMLElement, options?: Omit<Pong3DOptions, 'playerCount'>): Pong3D {
-	return new Pong3D(container, { 
-		playerCount: DEFAULT_PLAYER_COUNT,
-		...options 
-	});
-}
diff --git a/frontend/src/game/Pong3DInput.ts b/frontend/src/game/Pong3DInput.ts
deleted file mode 100644
index 06fd32d..0000000
--- a/frontend/src/game/Pong3DInput.ts
+++ /dev/null
@@ -1,111 +0,0 @@
-/**
- * Pong3DInput - Handles keyboard input for up to 4 players
- * 
- * Key Bindings:
- * - Player 1: A/W (left) D/S (right)
- * - Player 2: Arrow Left/Up (left) Arrow Right/Down (right)  
- * - Player 3: Q (left) E (right)
- * - Player 4: U (left) I (right)
- * 
- * Additional Controls:
- * - Double-click canvas: Toggle fullscreen
- */
-
-export interface KeyState {
-	p1Left: boolean;
-	p1Right: boolean;
-	p2Left: boolean;
-	p2Right: boolean;
-	p3Left: boolean;
-	p3Right: boolean;
-	p4Left: boolean;
-	p4Right: boolean;
-}
-
-export interface InputHandlers {
-	onKeyDown: (e: KeyboardEvent) => void;
-	onKeyUp: (e: KeyboardEvent) => void;
-	onToggleFullscreen: () => void;
-}
-
-export class Pong3DInput {
-	private keyState: KeyState = {
-		p1Left: false,
-		p1Right: false,
-		p2Left: false,
-		p2Right: false,
-		p3Left: false,
-		p3Right: false,
-		p4Left: false,
-		p4Right: false,
-	};
-
-	private canvas: HTMLCanvasElement;
-
-	constructor(canvas: HTMLCanvasElement) {
-		this.canvas = canvas;
-		this.setupEventListeners();
-	}
-
-	private setupEventListeners(): void {
-		window.addEventListener('keydown', e => this.handleKeyDown(e));
-		window.addEventListener('keyup', e => this.handleKeyUp(e));
-		this.canvas.addEventListener('dblclick', () => this.toggleFullscreen());
-	}
-
-	private handleKeyDown(e: KeyboardEvent): void {
-		const k = e.key;
-		// Player 1: WASD
-		if (k === 'a' || k === 'A' || k === 'w' || k === 'W') this.keyState.p1Left = true;
-		if (k === 'd' || k === 'D' || k === 's' || k === 'S') this.keyState.p1Right = true;
-
-		// Player 2: Arrow keys
-		if (k === 'ArrowLeft' || k === 'ArrowUp') this.keyState.p2Left = true;
-		if (k === 'ArrowRight' || k === 'ArrowDown') this.keyState.p2Right = true;
-
-		// Player 3: QE keys
-		if (k === 'q' || k === 'Q') this.keyState.p3Left = true;
-		if (k === 'e' || k === 'E') this.keyState.p3Right = true;
-
-		// Player 4: UI keys
-		if (k === 'u' || k === 'U') this.keyState.p4Left = true;
-		if (k === 'i' || k === 'I') this.keyState.p4Right = true;
-	}
-
-	private handleKeyUp(e: KeyboardEvent): void {
-		const k = e.key;
-		// Player 1: WASD
-		if (k === 'a' || k === 'A' || k === 'w' || k === 'W') this.keyState.p1Left = false;
-		if (k === 'd' || k === 'D' || k === 's' || k === 'S') this.keyState.p1Right = false;
-
-		// Player 2: Arrow keys
-		if (k === 'ArrowLeft' || k === 'ArrowUp') this.keyState.p2Left = false;
-		if (k === 'ArrowRight' || k === 'ArrowDown') this.keyState.p2Right = false;
-
-		// Player 3: QE keys
-		if (k === 'q' || k === 'Q') this.keyState.p3Left = false;
-		if (k === 'e' || k === 'E') this.keyState.p3Right = false;
-
-		// Player 4: UI keys
-		if (k === 'u' || k === 'U') this.keyState.p4Left = false;
-		if (k === 'i' || k === 'I') this.keyState.p4Right = false;
-	}
-
-	private toggleFullscreen(): void {
-		if (!document.fullscreenElement) {
-			this.canvas.requestFullscreen().catch(err => console.warn('Fullscreen failed:', err));
-		} else {
-			document.exitFullscreen();
-		}
-	}
-
-	public getKeyState(): KeyState {
-		return { ...this.keyState };
-	}
-
-	public cleanup(): void {
-		window.removeEventListener('keydown', this.handleKeyDown);
-		window.removeEventListener('keyup', this.handleKeyUp);
-		this.canvas.removeEventListener('dblclick', this.toggleFullscreen);
-	}
-}
diff --git a/frontend/src/game/Pong3DUI.ts b/frontend/src/game/Pong3DUI.ts
deleted file mode 100644
index ae98492..0000000
--- a/frontend/src/game/Pong3DUI.ts
+++ /dev/null
@@ -1,266 +0,0 @@
-// UI helper for Pong3D: builds GUI controls and returns references so the main scene can wire them
-import * as BABYLON from '@babylonjs/core';
-import * as GUI from '@babylonjs/gui';
-
-export interface Pong3DUIOptions {
-    playerNames?: string[]; // up to 4
-    playerScores?: number[]; // up to 4
-    positions?: ('top' | 'bottom' | 'left' | 'right')[]; // optional initial placement per player
-}
-
-export interface Pong3DUIHandles {
-    guiTexture: GUI.AdvancedDynamicTexture;
-    topContainer: GUI.Rectangle;
-    bottomContainer: GUI.Rectangle;
-    leftContainer: GUI.Rectangle;
-    rightContainer: GUI.Rectangle;
-    // per-player controls
-    playerStacks: Array<GUI.StackPanel>;
-    playerNameTexts: Array<GUI.TextBlock>;
-    playerScoreTexts: Array<GUI.TextBlock>;
-    movePlayerTo: (playerIndex: number, position: 'top' | 'bottom' | 'left' | 'right') => void;
-    dispose: () => void;
-}
-
-export function createPong3DUI(_scene: BABYLON.Scene, opts?: Pong3DUIOptions): Pong3DUIHandles {
-    const names = opts?.playerNames ?? ['Player1', 'Player2', 'Player3', 'Player4'];
-    const scores = opts?.playerScores ?? [0, 0, 0, 0];
-    const positions = opts?.positions ?? ['bottom', 'top', 'right', 'left'];
-
-    const guiTexture = GUI.AdvancedDynamicTexture.CreateFullscreenUI('UI');
-
-    // create containers
-    const topContainer = new GUI.Rectangle();
-    topContainer.width = '380px';
-    topContainer.height = '100px';
-    topContainer.thickness = 0;
-    topContainer.background = 'transparent';
-    topContainer.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-    topContainer.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP;
-    topContainer.top = -40;
-    topContainer.left = 40; // nudge to the right
-    guiTexture.addControl(topContainer);
-
-    const bottomContainer = new GUI.Rectangle();
-    bottomContainer.width = '380px';
-    bottomContainer.height = '100px';
-    bottomContainer.thickness = 0;
-    bottomContainer.background = 'transparent';
-    bottomContainer.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-    bottomContainer.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;
-    topContainer.top = -40;
-    bottomContainer.left = 40; // nudge to the right
-    guiTexture.addControl(bottomContainer);
-
-    const leftContainer = new GUI.Rectangle();
-    leftContainer.width = '280px';
-    leftContainer.height = '400px';
-    leftContainer.thickness = 0;
-    leftContainer.background = 'transparent';
-    leftContainer.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
-    leftContainer.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-    leftContainer.left = 10;
-    leftContainer.top = '-15%'; // move up by 15% of canvas height
-    guiTexture.addControl(leftContainer);
-
-    const rightContainer = new GUI.Rectangle();
-    rightContainer.width = '280px';
-    rightContainer.height = '400px';
-    rightContainer.thickness = 0;
-    rightContainer.background = 'transparent';
-    rightContainer.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;
-    rightContainer.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-    rightContainer.left = -10;
-    rightContainer.top = '-15%'; // move up by 15% of canvas height
-    guiTexture.addControl(rightContainer);
-
-    const playerStacks: Array<GUI.StackPanel> = [];
-    const playerNameTexts: Array<GUI.TextBlock> = [];
-    const playerScoreTexts: Array<GUI.TextBlock> = [];
-
-    // helper to create a player block
-    function makePlayerBlock(idx: number) {
-        const stack = new GUI.StackPanel();
-        // default to vertical; movePlayerTo will toggle for top/bottom
-        stack.isVertical = true;
-
-    // ensure stack can give room for large score when horizontal
-    stack.height = '120px';
-    stack.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-
-    const name = new GUI.TextBlock();
-    // default: allow wrapping for side layout; movePlayerTo will tune for horizontal layout
-    name.textWrapping = true;
-    name.resizeToFit = true;
-    name.width = '100%';
-        name.text = names[idx] ?? `Player${idx + 1}`;
-        // colors: p1 red, p2 blue, p3 green, p4 cyan
-        const colors = ['red', 'blue', 'green', 'cyan'];
-        name.color = colors[idx] ?? 'white';
-        name.fontSize = 44;
-        name.fontWeight = 'bold';
-        name.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-        name.paddingRight = '6px';
-
-    const score = new GUI.TextBlock();
-    // score should adapt but not claim full width in horizontal layout; width tuned in movePlayerTo
-    score.textWrapping = false;
-    score.resizeToFit = false;
-    score.width = 'auto';
-        score.text = String(scores[idx] ?? 0);
-        score.color = 'white';
-        score.fontSize = 50;
-        score.fontWeight = 'bold';
-    score.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-    // vertically center text so when stacked horizontally both lines align
-    score.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-
-    stack.addControl(name);
-    stack.addControl(score);
-
-    // default horizontal alignment
-    stack.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-    stack.width = 'auto';
-
-        playerStacks.push(stack);
-        playerNameTexts.push(name);
-        playerScoreTexts.push(score);
-    }
-
-    for (let i = 0; i < 4; i++) makePlayerBlock(i);
-
-    // place stacks according to positions array
-    const containerFor = (pos: 'top' | 'bottom' | 'left' | 'right') => {
-        if (pos === 'top') return topContainer;
-        if (pos === 'bottom') return bottomContainer;
-        if (pos === 'left') return leftContainer;
-        return rightContainer;
-    };
-
-    const currentParent: Array<GUI.Container | null> = [null, null, null, null];
-
-    function movePlayerTo(playerIndex: number, position: 'top' | 'bottom' | 'left' | 'right') {
-        if (playerIndex < 0 || playerIndex >= playerStacks.length) return;
-        const stack = playerStacks[playerIndex];
-        const target = containerFor(position);
-        // remove from existing parent
-        const prev = currentParent[playerIndex];
-        try {
-            if (prev && typeof (prev as any).removeControl === 'function') {
-                (prev as any).removeControl(stack);
-            }
-        } catch (e) {}
-        try {
-            target.addControl(stack);
-            currentParent[playerIndex] = target;
-        } catch (e) {
-            console.warn('Failed to move player stack', e);
-        }
-        // COMPLETE STYLE RESET: Ensure all properties are reset to defaults before applying position-specific styling
-        const isSide = position === 'left' || position === 'right';
-        const name = playerNameTexts[playerIndex];
-        const score = playerScoreTexts[playerIndex];
-        
-        // Reset all position-dependent properties to defaults
-        stack.left = 0;
-        stack.width = 'auto';
-        stack.height = '120px';
-        stack.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-        stack.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-        
-        name.left = 0;
-        name.paddingRight = '6px';
-        name.paddingLeft = '0px';
-        name.width = '100%';
-        name.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-        name.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-        name.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-        name.textWrapping = true;
-        name.resizeToFit = true;
-        
-        score.left = 0;
-        score.paddingLeft = '0px';
-        score.width = 'auto';
-        score.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-        score.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-        score.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-        score.textWrapping = false;
-        score.resizeToFit = false;
-        
-        // Now apply position-specific styling
-        if (isSide) {
-            // left/right: stack vertical, align text left/right
-            stack.isVertical = true;
-            stack.horizontalAlignment = position === 'left' ? GUI.Control.HORIZONTAL_ALIGNMENT_LEFT : GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;
-            // make stack fill the container so child controls with 100% width are visible
-            stack.width = '100%';
-            stack.left = 0;
-            name.textHorizontalAlignment = position === 'left' ? GUI.Control.HORIZONTAL_ALIGNMENT_LEFT : GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;
-            score.textHorizontalAlignment = position === 'left' ? GUI.Control.HORIZONTAL_ALIGNMENT_LEFT : GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;
-            // padding and width: make name take container width so it wraps nicely, score centered below
-            name.paddingRight = '6px';
-            // Use explicit positioning instead of text alignment for scores
-            if (position === 'left') {
-                score.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
-                score.left = '0px'; // move 20px further left (was 10px, now -10px)
-                score.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
-            } else {
-                score.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;
-                score.left = '-10px'; // move 5px further right (was -10px, now -15px)
-                score.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT;
-            }
-            name.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-            score.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-            name.width = '100%';
-            score.width = '100%'; // keep full width so alignment works properly
-            // allow text to scale if needed
-            name.resizeToFit = true;
-            score.resizeToFit = true;
-        } else {
-            // top/bottom: stack horizontal, center both texts on one line
-            stack.isVertical = false;
-            stack.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
-            // align stack to top for top container, center for bottom
-            stack.verticalAlignment = position === 'top' ? GUI.Control.VERTICAL_ALIGNMENT_TOP : GUI.Control.VERTICAL_ALIGNMENT_CENTER;
-            // set fixed width to match content (name + score + padding)
-            stack.width = '370px';
-            stack.left = 0;
-            // for horizontal layout, let text align naturally in their containers
-            name.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
-            score.textHorizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT;
-            // align both to bottom so they sit on same baseline
-            name.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;
-            score.textVerticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;
-            // give a little space between name and score when horizontal
-            name.paddingRight = '12px';
-            score.paddingLeft = '6px';
-            // ensure stack height accommodates score
-            stack.height = '100px';
-            // tune widths so both name and score can sit side-by-side
-            name.textWrapping = false;
-            name.resizeToFit = false;
-            name.width = '200px';
-            score.width = '150px';
-            score.resizeToFit = false;
-        }
-    }
-
-    // initial placement
-    for (let i = 0; i < 4; i++) {
-        const pos = positions[i] ?? ['top', 'bottom', 'left', 'right'][i];
-        movePlayerTo(i, pos);
-    }
-
-    return {
-        guiTexture,
-        topContainer,
-        bottomContainer,
-        leftContainer,
-        rightContainer,
-        playerStacks,
-        playerNameTexts,
-        playerScoreTexts,
-        movePlayerTo,
-        dispose: () => guiTexture.dispose(),
-    };
-}
diff --git a/frontend/src/main.ts b/frontend/src/main.ts
index 998da26..aa6e5f4 100644
--- a/frontend/src/main.ts
+++ b/frontend/src/main.ts
@@ -2,11 +2,15 @@ import { Router } from './misc/Router';
 import { Video } from './misc/Video';
 import './style.css';
 
-// Register Babylon glTF loaders (side-effect import). Ensure '@babylonjs/loaders' is installed.
-import '@babylonjs/loaders';
-
 const app = document.getElementById('app') as HTMLDivElement;
 app.className = 'w-screen h-screen flex flex-col';
 
+// TODO: Try removing this hacky solution to load GLTF loader. Import didn't work
+const response = await fetch(
+	'https://preview.babylonjs.com/loaders/babylon.glTF2FileLoader.js'
+);
+const scriptText = await response.text();
+eval(scriptText);
+
 void new Video();
 void new Router();
diff --git a/frontend/src/misc/LoginButton.ts b/frontend/src/misc/LoginButton.ts
new file mode 100644
index 0000000..4b66dbc
--- /dev/null
+++ b/frontend/src/misc/LoginButton.ts
@@ -0,0 +1,16 @@
+import { Button } from '../components/Button';
+import { LoginModal } from '../modals/LoginModal';
+
+export class LoginButton extends Button {
+	constructor(parent: HTMLElement) {
+		super(
+			'Login',
+			() => {
+				void new LoginModal(document.body);
+			},
+			parent
+		);
+
+		this.element.classList.add('absolute', 'top-4', 'right-4');
+	}
+}
diff --git a/frontend/src/modals/LoginModal.ts b/frontend/src/modals/LoginModal.ts
new file mode 100644
index 0000000..ce09927
--- /dev/null
+++ b/frontend/src/modals/LoginModal.ts
@@ -0,0 +1,44 @@
+import { Button } from '../components/Button';
+import { Modal } from '../components/Modal';
+
+export class LoginModal extends Modal {
+	constructor(parent: HTMLElement) {
+		super(parent);
+
+		this.box.classList.add(
+			'flex',
+			'flex-col',
+			'items-center',
+			'justify-center',
+			'gap-2',
+			'p-4'
+		);
+
+		// Create an input
+		const UsernameField = document.createElement('input');
+		UsernameField.type = 'text';
+		UsernameField.id = 'username';
+		UsernameField.placeholder = 'Enter your username';
+		UsernameField.className = 'border border-gray-300 rounded p-2';
+		this.box.appendChild(UsernameField);
+
+		// Create a password input
+		const PasswordField = document.createElement('input');
+		PasswordField.type = 'password';
+		PasswordField.id = 'password';
+		PasswordField.placeholder = 'Enter your password';
+		PasswordField.className = 'border border-gray-300 rounded p-2';
+		this.box.appendChild(PasswordField);
+
+		void new Button(
+			'Login',
+			async () => {
+				const username = UsernameField.value;
+				const password = PasswordField.value;
+
+				// Perform login logic here
+			},
+			this.box
+		);
+	}
+}
diff --git a/frontend/src/screens/GameScreen.ts b/frontend/src/screens/GameScreen.ts
index 4c1b760..a374186 100644
--- a/frontend/src/screens/GameScreen.ts
+++ b/frontend/src/screens/GameScreen.ts
@@ -1,4 +1,5 @@
 import { Screen } from '../components/Screen';
+// import { initPongScene } from '../game/3Dview';
 import { Pong3D } from '../game/Pong3D';
 
 export class GameScreen extends Screen {
diff --git a/frontend/src/screens/HomeScreen.ts b/frontend/src/screens/HomeScreen.ts
index 12cd674..8a65ef2 100644
--- a/frontend/src/screens/HomeScreen.ts
+++ b/frontend/src/screens/HomeScreen.ts
@@ -1,6 +1,7 @@
+import { Button } from '../components/Button';
 import { Screen } from '../components/Screen';
+import { LoginButton } from '../misc/LoginButton';
 import { PlaceholderModal } from '../modals/PlaceholderModal';
-import { Button } from '../components/Button';
 
 export class HomeScreen extends Screen {
 	constructor() {
@@ -28,6 +29,8 @@ export class HomeScreen extends Screen {
 		this.element.appendChild(buttonContainer);
 
 		// Buttons
+		void new LoginButton(this.element);
+
 		void new Button(
 			'Postman Mock-Request',
 			async () => {
diff --git a/graphics/pong.blend b/graphics/pong.blend
deleted file mode 100644
index cced878..0000000
Binary files a/graphics/pong.blend and /dev/null differ
diff --git a/graphics/pong.blend1 b/graphics/pong.blend1
deleted file mode 100644
index 9b2ecac..0000000
Binary files a/graphics/pong.blend1 and /dev/null differ
diff --git a/graphics/pong2.blend b/graphics/pong2.blend
deleted file mode 100644
index 73afc1a..0000000
Binary files a/graphics/pong2.blend and /dev/null differ
diff --git a/graphics/pong3p.blend b/graphics/pong3p.blend
deleted file mode 100644
index 75eb20d..0000000
Binary files a/graphics/pong3p.blend and /dev/null differ
diff --git a/graphics/pong3p.blend1 b/graphics/pong3p.blend1
deleted file mode 100644
index c13ea52..0000000
Binary files a/graphics/pong3p.blend1 and /dev/null differ
diff --git a/graphics/pong4p.blend b/graphics/pong4p.blend
deleted file mode 100644
index 2198058..0000000
Binary files a/graphics/pong4p.blend and /dev/null differ
diff --git a/graphics/pong4p.blend1 b/graphics/pong4p.blend1
deleted file mode 100644
index d078477..0000000
Binary files a/graphics/pong4p.blend1 and /dev/null differ
diff --git a/package-lock.json b/package-lock.json
index 930850b..eeaadb5 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -9,16 +9,14 @@
 			"version": "1.0.0",
 			"license": "ISC",
 			"dependencies": {
-				"@babylonjs/core": "^8.24.0",
-				"@babylonjs/gui": "^8.24.0",
 				"@babylonjs/loaders": "^8.24.0",
 				"@fastify/autoload": "^6.0.0",
 				"@fastify/cors": "^11.1.0",
 				"@fastify/sensible": "^6.0.0",
 				"@fastify/swagger": "^9.5.1",
 				"@fastify/swagger-ui": "^5.2.3",
-				"@fastify/websocket": "^11.2.0",
 				"@types/node": "^24.2.0",
+				"babylonjs": "^8.24.0",
 				"fastify": "^5.0.0",
 				"fastify-cli": "^7.4.0",
 				"fastify-plugin": "^5.0.0",
@@ -46,16 +44,8 @@
 			"version": "8.24.0",
 			"resolved": "https://registry.npmjs.org/@babylonjs/core/-/core-8.24.0.tgz",
 			"integrity": "sha512-c3ykhx4iBm3Rvt1DYmDBw4tlhY8OHs299hx4QYwah3bk/HgkFd1t2J1LncAW4VN3ThPqJ89FmXUKWuigOoWaVQ==",
-			"license": "Apache-2.0"
-		},
-		"node_modules/@babylonjs/gui": {
-			"version": "8.24.0",
-			"resolved": "https://registry.npmjs.org/@babylonjs/gui/-/gui-8.24.0.tgz",
-			"integrity": "sha512-PyirLQVf/R36UrvDivIuTnJhgcTaa3e4zEgBow5ATyYSlQZc4YXOECv2unomiC10Ey1olmDXFFGThXtlhP55Mg==",
 			"license": "Apache-2.0",
-			"peerDependencies": {
-				"@babylonjs/core": "^8.0.0"
-			}
+			"peer": true
 		},
 		"node_modules/@babylonjs/loaders": {
 			"version": "8.24.0",
@@ -808,27 +798,6 @@
 				"yaml": "^2.4.1"
 			}
 		},
-		"node_modules/@fastify/websocket": {
-			"version": "11.2.0",
-			"resolved": "https://registry.npmjs.org/@fastify/websocket/-/websocket-11.2.0.tgz",
-			"integrity": "sha512-3HrDPbAG1CzUCqnslgJxppvzaAZffieOVbLp1DAy1huCSynUWPifSvfdEDUR8HlJLp3sp1A36uOM2tJogADS8w==",
-			"funding": [
-				{
-					"type": "github",
-					"url": "https://github.com/sponsors/fastify"
-				},
-				{
-					"type": "opencollective",
-					"url": "https://opencollective.com/fastify"
-				}
-			],
-			"license": "MIT",
-			"dependencies": {
-				"duplexify": "^4.1.3",
-				"fastify-plugin": "^5.0.0",
-				"ws": "^8.16.0"
-			}
-		},
 		"node_modules/@isaacs/balanced-match": {
 			"version": "4.0.1",
 			"resolved": "https://registry.npmjs.org/@isaacs/balanced-match/-/balanced-match-4.0.1.tgz",
@@ -938,9 +907,9 @@
 			}
 		},
 		"node_modules/@rollup/rollup-android-arm-eabi": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.48.0.tgz",
-			"integrity": "sha512-aVzKH922ogVAWkKiyKXorjYymz2084zrhrZRXtLrA5eEx5SO8Dj0c/4FpCHZyn7MKzhW2pW4tK28vVr+5oQ2xw==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.46.3.tgz",
+			"integrity": "sha512-UmTdvXnLlqQNOCJnyksjPs1G4GqXNGW1LrzCe8+8QoaLhhDeTXYBgJ3k6x61WIhlHX2U+VzEJ55TtIjR/HTySA==",
 			"cpu": [
 				"arm"
 			],
@@ -952,9 +921,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-android-arm64": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.48.0.tgz",
-			"integrity": "sha512-diOdQuw43xTa1RddAFbhIA8toirSzFMcnIg8kvlzRbK26xqEnKJ/vqQnghTAajy2Dcy42v+GMPMo6jq67od+Dw==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.46.3.tgz",
+			"integrity": "sha512-8NoxqLpXm7VyeI0ocidh335D6OKT0UJ6fHdnIxf3+6oOerZZc+O7r+UhvROji6OspyPm+rrIdb1gTXtVIqn+Sg==",
 			"cpu": [
 				"arm64"
 			],
@@ -966,9 +935,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-darwin-arm64": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.48.0.tgz",
-			"integrity": "sha512-QhR2KA18fPlJWFefySJPDYZELaVqIUVnYgAOdtJ+B/uH96CFg2l1TQpX19XpUMWUqMyIiyY45wje8K6F4w4/CA==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.46.3.tgz",
+			"integrity": "sha512-csnNavqZVs1+7/hUKtgjMECsNG2cdB8F7XBHP6FfQjqhjF8rzMzb3SLyy/1BG7YSfQ+bG75Ph7DyedbUqwq1rA==",
 			"cpu": [
 				"arm64"
 			],
@@ -980,9 +949,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-darwin-x64": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.48.0.tgz",
-			"integrity": "sha512-Q9RMXnQVJ5S1SYpNSTwXDpoQLgJ/fbInWOyjbCnnqTElEyeNvLAB3QvG5xmMQMhFN74bB5ZZJYkKaFPcOG8sGg==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.46.3.tgz",
+			"integrity": "sha512-r2MXNjbuYabSIX5yQqnT8SGSQ26XQc8fmp6UhlYJd95PZJkQD1u82fWP7HqvGUf33IsOC6qsiV+vcuD4SDP6iw==",
 			"cpu": [
 				"x64"
 			],
@@ -994,9 +963,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-freebsd-arm64": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.48.0.tgz",
-			"integrity": "sha512-3jzOhHWM8O8PSfyft+ghXZfBkZawQA0PUGtadKYxFqpcYlOYjTi06WsnYBsbMHLawr+4uWirLlbhcYLHDXR16w==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.46.3.tgz",
+			"integrity": "sha512-uluObTmgPJDuJh9xqxyr7MV61Imq+0IvVsAlWyvxAaBSNzCcmZlhfYcRhCdMaCsy46ccZa7vtDDripgs9Jkqsw==",
 			"cpu": [
 				"arm64"
 			],
@@ -1008,9 +977,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-freebsd-x64": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.48.0.tgz",
-			"integrity": "sha512-NcD5uVUmE73C/TPJqf78hInZmiSBsDpz3iD5MF/BuB+qzm4ooF2S1HfeTChj5K4AV3y19FFPgxonsxiEpy8v/A==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.46.3.tgz",
+			"integrity": "sha512-AVJXEq9RVHQnejdbFvh1eWEoobohUYN3nqJIPI4mNTMpsyYN01VvcAClxflyk2HIxvLpRcRggpX1m9hkXkpC/A==",
 			"cpu": [
 				"x64"
 			],
@@ -1022,9 +991,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-arm-gnueabihf": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.48.0.tgz",
-			"integrity": "sha512-JWnrj8qZgLWRNHr7NbpdnrQ8kcg09EBBq8jVOjmtlB3c8C6IrynAJSMhMVGME4YfTJzIkJqvSUSVJRqkDnu/aA==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.46.3.tgz",
+			"integrity": "sha512-byyflM+huiwHlKi7VHLAYTKr67X199+V+mt1iRgJenAI594vcmGGddWlu6eHujmcdl6TqSNnvqaXJqZdnEWRGA==",
 			"cpu": [
 				"arm"
 			],
@@ -1036,9 +1005,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-arm-musleabihf": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.48.0.tgz",
-			"integrity": "sha512-9xu92F0TxuMH0tD6tG3+GtngwdgSf8Bnz+YcsPG91/r5Vgh5LNofO48jV55priA95p3c92FLmPM7CvsVlnSbGQ==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.46.3.tgz",
+			"integrity": "sha512-aLm3NMIjr4Y9LklrH5cu7yybBqoVCdr4Nvnm8WB7PKCn34fMCGypVNpGK0JQWdPAzR/FnoEoFtlRqZbBBLhVoQ==",
 			"cpu": [
 				"arm"
 			],
@@ -1050,9 +1019,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-arm64-gnu": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.48.0.tgz",
-			"integrity": "sha512-NLtvJB5YpWn7jlp1rJiY0s+G1Z1IVmkDuiywiqUhh96MIraC0n7XQc2SZ1CZz14shqkM+XN2UrfIo7JB6UufOA==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.46.3.tgz",
+			"integrity": "sha512-VtilE6eznJRDIoFOzaagQodUksTEfLIsvXymS+UdJiSXrPW7Ai+WG4uapAc3F7Hgs791TwdGh4xyOzbuzIZrnw==",
 			"cpu": [
 				"arm64"
 			],
@@ -1064,9 +1033,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-arm64-musl": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.48.0.tgz",
-			"integrity": "sha512-QJ4hCOnz2SXgCh+HmpvZkM+0NSGcZACyYS8DGbWn2PbmA0e5xUk4bIP8eqJyNXLtyB4gZ3/XyvKtQ1IFH671vQ==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.46.3.tgz",
+			"integrity": "sha512-dG3JuS6+cRAL0GQ925Vppafi0qwZnkHdPeuZIxIPXqkCLP02l7ka+OCyBoDEv8S+nKHxfjvjW4OZ7hTdHkx8/w==",
 			"cpu": [
 				"arm64"
 			],
@@ -1078,9 +1047,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-loongarch64-gnu": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.48.0.tgz",
-			"integrity": "sha512-Pk0qlGJnhILdIC5zSKQnprFjrGmjfDM7TPZ0FKJxRkoo+kgMRAg4ps1VlTZf8u2vohSicLg7NP+cA5qE96PaFg==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.46.3.tgz",
+			"integrity": "sha512-iU8DxnxEKJptf8Vcx4XvAUdpkZfaz0KWfRrnIRrOndL0SvzEte+MTM7nDH4A2Now4FvTZ01yFAgj6TX/mZl8hQ==",
 			"cpu": [
 				"loong64"
 			],
@@ -1092,9 +1061,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-ppc64-gnu": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.48.0.tgz",
-			"integrity": "sha512-/dNFc6rTpoOzgp5GKoYjT6uLo8okR/Chi2ECOmCZiS4oqh3mc95pThWma7Bgyk6/WTEvjDINpiBCuecPLOgBLQ==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.46.3.tgz",
+			"integrity": "sha512-VrQZp9tkk0yozJoQvQcqlWiqaPnLM6uY1qPYXvukKePb0fqaiQtOdMJSxNFUZFsGw5oA5vvVokjHrx8a9Qsz2A==",
 			"cpu": [
 				"ppc64"
 			],
@@ -1106,9 +1075,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-riscv64-gnu": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.48.0.tgz",
-			"integrity": "sha512-YBwXsvsFI8CVA4ej+bJF2d9uAeIiSkqKSPQNn0Wyh4eMDY4wxuSp71BauPjQNCKK2tD2/ksJ7uhJ8X/PVY9bHQ==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.46.3.tgz",
+			"integrity": "sha512-uf2eucWSUb+M7b0poZ/08LsbcRgaDYL8NCGjUeFMwCWFwOuFcZ8D9ayPl25P3pl+D2FH45EbHdfyUesQ2Lt9wA==",
 			"cpu": [
 				"riscv64"
 			],
@@ -1120,9 +1089,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-riscv64-musl": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.48.0.tgz",
-			"integrity": "sha512-FI3Rr2aGAtl1aHzbkBIamsQyuauYtTF9SDUJ8n2wMXuuxwchC3QkumZa1TEXYIv/1AUp1a25Kwy6ONArvnyeVQ==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.46.3.tgz",
+			"integrity": "sha512-7tnUcDvN8DHm/9ra+/nF7lLzYHDeODKKKrh6JmZejbh1FnCNZS8zMkZY5J4sEipy2OW1d1Ncc4gNHUd0DLqkSg==",
 			"cpu": [
 				"riscv64"
 			],
@@ -1134,9 +1103,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-s390x-gnu": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.48.0.tgz",
-			"integrity": "sha512-Dx7qH0/rvNNFmCcIRe1pyQ9/H0XO4v/f0SDoafwRYwc2J7bJZ5N4CHL/cdjamISZ5Cgnon6iazAVRFlxSoHQnQ==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.46.3.tgz",
+			"integrity": "sha512-MUpAOallJim8CsJK+4Lc9tQzlfPbHxWDrGXZm2z6biaadNpvh3a5ewcdat478W+tXDoUiHwErX/dOql7ETcLqg==",
 			"cpu": [
 				"s390x"
 			],
@@ -1148,9 +1117,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-x64-gnu": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.48.0.tgz",
-			"integrity": "sha512-GUdZKTeKBq9WmEBzvFYuC88yk26vT66lQV8D5+9TgkfbewhLaTHRNATyzpQwwbHIfJvDJ3N9WJ90wK/uR3cy3Q==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.46.3.tgz",
+			"integrity": "sha512-F42IgZI4JicE2vM2PWCe0N5mR5vR0gIdORPqhGQ32/u1S1v3kLtbZ0C/mi9FFk7C5T0PgdeyWEPajPjaUpyoKg==",
 			"cpu": [
 				"x64"
 			],
@@ -1162,9 +1131,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-linux-x64-musl": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.48.0.tgz",
-			"integrity": "sha512-ao58Adz/v14MWpQgYAb4a4h3fdw73DrDGtaiF7Opds5wNyEQwtO6M9dBh89nke0yoZzzaegq6J/EXs7eBebG8A==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.46.3.tgz",
+			"integrity": "sha512-oLc+JrwwvbimJUInzx56Q3ujL3Kkhxehg7O1gWAYzm8hImCd5ld1F2Gry5YDjR21MNb5WCKhC9hXgU7rRlyegQ==",
 			"cpu": [
 				"x64"
 			],
@@ -1176,9 +1145,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-win32-arm64-msvc": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.48.0.tgz",
-			"integrity": "sha512-kpFno46bHtjZVdRIOxqaGeiABiToo2J+st7Yce+aiAoo1H0xPi2keyQIP04n2JjDVuxBN6bSz9R6RdTK5hIppw==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.46.3.tgz",
+			"integrity": "sha512-lOrQ+BVRstruD1fkWg9yjmumhowR0oLAAzavB7yFSaGltY8klttmZtCLvOXCmGE9mLIn8IBV/IFrQOWz5xbFPg==",
 			"cpu": [
 				"arm64"
 			],
@@ -1190,9 +1159,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-win32-ia32-msvc": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.48.0.tgz",
-			"integrity": "sha512-rFYrk4lLk9YUTIeihnQMiwMr6gDhGGSbWThPEDfBoU/HdAtOzPXeexKi7yU8jO+LWRKnmqPN9NviHQf6GDwBcQ==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.46.3.tgz",
+			"integrity": "sha512-vvrVKPRS4GduGR7VMH8EylCBqsDcw6U+/0nPDuIjXQRbHJc6xOBj+frx8ksfZAh6+Fptw5wHrN7etlMmQnPQVg==",
 			"cpu": [
 				"ia32"
 			],
@@ -1204,9 +1173,9 @@
 			]
 		},
 		"node_modules/@rollup/rollup-win32-x64-msvc": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.48.0.tgz",
-			"integrity": "sha512-sq0hHLTgdtwOPDB5SJOuaoHyiP1qSwg+71TQWk8iDS04bW1wIE0oQ6otPiRj2ZvLYNASLMaTp8QRGUVZ+5OL5A==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.46.3.tgz",
+			"integrity": "sha512-fi3cPxCnu3ZeM3EwKZPgXbWoGzm2XHgB/WShKI81uj8wG0+laobmqy5wbgEwzstlbLu4MyO8C19FyhhWseYKNQ==",
 			"cpu": [
 				"x64"
 			],
@@ -1679,6 +1648,13 @@
 				"fastq": "^1.17.1"
 			}
 		},
+		"node_modules/babylonjs": {
+			"version": "8.24.0",
+			"resolved": "https://registry.npmjs.org/babylonjs/-/babylonjs-8.24.0.tgz",
+			"integrity": "sha512-fXky2czXUBgCIAczqHpUiRwxPdvr+ASr6a9ANvQnEMUbLQdYlLbH8vmF+xjPs66CGIjQ4uiMhadx6C+NZftMKg==",
+			"hasInstallScript": true,
+			"license": "Apache-2.0"
+		},
 		"node_modules/babylonjs-gltf2interface": {
 			"version": "8.24.0",
 			"resolved": "https://registry.npmjs.org/babylonjs-gltf2interface/-/babylonjs-gltf2interface-8.24.0.tgz",
@@ -1891,18 +1867,6 @@
 				"url": "https://dotenvx.com"
 			}
 		},
-		"node_modules/duplexify": {
-			"version": "4.1.3",
-			"resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.3.tgz",
-			"integrity": "sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==",
-			"license": "MIT",
-			"dependencies": {
-				"end-of-stream": "^1.4.1",
-				"inherits": "^2.0.3",
-				"readable-stream": "^3.1.1",
-				"stream-shift": "^1.0.2"
-			}
-		},
 		"node_modules/eastasianwidth": {
 			"version": "0.2.0",
 			"resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
@@ -2871,13 +2835,13 @@
 			}
 		},
 		"node_modules/magic-string": {
-			"version": "0.30.18",
-			"resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.18.tgz",
-			"integrity": "sha512-yi8swmWbO17qHhwIBNeeZxTceJMeBvWJaId6dyvTSOwTipqeHhMhOrz6513r1sOKnpvQ7zkhlG8tPrpilwTxHQ==",
+			"version": "0.30.17",
+			"resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
+			"integrity": "sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==",
 			"dev": true,
 			"license": "MIT",
 			"dependencies": {
-				"@jridgewell/sourcemap-codec": "^1.5.5"
+				"@jridgewell/sourcemap-codec": "^1.5.0"
 			}
 		},
 		"node_modules/make-error": {
@@ -3548,9 +3512,9 @@
 			"license": "MIT"
 		},
 		"node_modules/rollup": {
-			"version": "4.48.0",
-			"resolved": "https://registry.npmjs.org/rollup/-/rollup-4.48.0.tgz",
-			"integrity": "sha512-BXHRqK1vyt9XVSEHZ9y7xdYtuYbwVod2mLwOMFP7t/Eqoc1pHRlG/WdV2qNeNvZHRQdLedaFycljaYYM96RqJQ==",
+			"version": "4.46.3",
+			"resolved": "https://registry.npmjs.org/rollup/-/rollup-4.46.3.tgz",
+			"integrity": "sha512-RZn2XTjXb8t5g13f5YclGoilU/kwT696DIkY3sywjdZidNSi3+vseaQov7D7BZXVJCPv3pDWUN69C78GGbXsKw==",
 			"dev": true,
 			"license": "MIT",
 			"dependencies": {
@@ -3564,26 +3528,26 @@
 				"npm": ">=8.0.0"
 			},
 			"optionalDependencies": {
-				"@rollup/rollup-android-arm-eabi": "4.48.0",
-				"@rollup/rollup-android-arm64": "4.48.0",
-				"@rollup/rollup-darwin-arm64": "4.48.0",
-				"@rollup/rollup-darwin-x64": "4.48.0",
-				"@rollup/rollup-freebsd-arm64": "4.48.0",
-				"@rollup/rollup-freebsd-x64": "4.48.0",
-				"@rollup/rollup-linux-arm-gnueabihf": "4.48.0",
-				"@rollup/rollup-linux-arm-musleabihf": "4.48.0",
-				"@rollup/rollup-linux-arm64-gnu": "4.48.0",
-				"@rollup/rollup-linux-arm64-musl": "4.48.0",
-				"@rollup/rollup-linux-loongarch64-gnu": "4.48.0",
-				"@rollup/rollup-linux-ppc64-gnu": "4.48.0",
-				"@rollup/rollup-linux-riscv64-gnu": "4.48.0",
-				"@rollup/rollup-linux-riscv64-musl": "4.48.0",
-				"@rollup/rollup-linux-s390x-gnu": "4.48.0",
-				"@rollup/rollup-linux-x64-gnu": "4.48.0",
-				"@rollup/rollup-linux-x64-musl": "4.48.0",
-				"@rollup/rollup-win32-arm64-msvc": "4.48.0",
-				"@rollup/rollup-win32-ia32-msvc": "4.48.0",
-				"@rollup/rollup-win32-x64-msvc": "4.48.0",
+				"@rollup/rollup-android-arm-eabi": "4.46.3",
+				"@rollup/rollup-android-arm64": "4.46.3",
+				"@rollup/rollup-darwin-arm64": "4.46.3",
+				"@rollup/rollup-darwin-x64": "4.46.3",
+				"@rollup/rollup-freebsd-arm64": "4.46.3",
+				"@rollup/rollup-freebsd-x64": "4.46.3",
+				"@rollup/rollup-linux-arm-gnueabihf": "4.46.3",
+				"@rollup/rollup-linux-arm-musleabihf": "4.46.3",
+				"@rollup/rollup-linux-arm64-gnu": "4.46.3",
+				"@rollup/rollup-linux-arm64-musl": "4.46.3",
+				"@rollup/rollup-linux-loongarch64-gnu": "4.46.3",
+				"@rollup/rollup-linux-ppc64-gnu": "4.46.3",
+				"@rollup/rollup-linux-riscv64-gnu": "4.46.3",
+				"@rollup/rollup-linux-riscv64-musl": "4.46.3",
+				"@rollup/rollup-linux-s390x-gnu": "4.46.3",
+				"@rollup/rollup-linux-x64-gnu": "4.46.3",
+				"@rollup/rollup-linux-x64-musl": "4.46.3",
+				"@rollup/rollup-win32-arm64-msvc": "4.46.3",
+				"@rollup/rollup-win32-ia32-msvc": "4.46.3",
+				"@rollup/rollup-win32-x64-msvc": "4.46.3",
 				"fsevents": "~2.3.2"
 			}
 		},
@@ -3764,12 +3728,6 @@
 				"node": ">= 0.8"
 			}
 		},
-		"node_modules/stream-shift": {
-			"version": "1.0.3",
-			"resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.3.tgz",
-			"integrity": "sha512-76ORR0DO1o1hlKwTbi/DM3EXWGf3ZJYO8cXX5RJwnul2DEg2oyoZyjLNoQM8WsvZiFKCRfC1O0J7iCvie3RZmQ==",
-			"license": "MIT"
-		},
 		"node_modules/string_decoder": {
 			"version": "1.3.0",
 			"resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
@@ -3907,17 +3865,13 @@
 			"license": "MIT"
 		},
 		"node_modules/tapable": {
-			"version": "2.2.3",
-			"resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.3.tgz",
-			"integrity": "sha512-ZL6DDuAlRlLGghwcfmSn9sK3Hr6ArtyudlSAiCqQ6IfE+b+HHbydbYDIG15IfS5do+7XQQBdBiubF/cV2dnDzg==",
+			"version": "2.2.2",
+			"resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.2.tgz",
+			"integrity": "sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==",
 			"dev": true,
 			"license": "MIT",
 			"engines": {
 				"node": ">=6"
-			},
-			"funding": {
-				"type": "opencollective",
-				"url": "https://opencollective.com/webpack"
 			}
 		},
 		"node_modules/tar": {
@@ -4032,9 +3986,9 @@
 			}
 		},
 		"node_modules/tsx": {
-			"version": "4.20.5",
-			"resolved": "https://registry.npmjs.org/tsx/-/tsx-4.20.5.tgz",
-			"integrity": "sha512-+wKjMNU9w/EaQayHXb7WA7ZaHY6hN8WgfvHNQ3t1PnU91/7O8TcTnIhCDYTZwnt8JsO9IBqZ30Ln1r7pPF52Aw==",
+			"version": "4.20.4",
+			"resolved": "https://registry.npmjs.org/tsx/-/tsx-4.20.4.tgz",
+			"integrity": "sha512-yyxBKfORQ7LuRt/BQKBXrpcq59ZvSW0XxwfjAt3w2/8PmdxaFzijtMhTawprSHhpzeM5BgU2hXHG3lklIERZXg==",
 			"dev": true,
 			"license": "MIT",
 			"dependencies": {
@@ -4118,14 +4072,14 @@
 			}
 		},
 		"node_modules/vite": {
-			"version": "7.1.3",
-			"resolved": "https://registry.npmjs.org/vite/-/vite-7.1.3.tgz",
-			"integrity": "sha512-OOUi5zjkDxYrKhTV3V7iKsoS37VUM7v40+HuwEmcrsf11Cdx9y3DIr2Px6liIcZFwt3XSRpQvFpL3WVy7ApkGw==",
+			"version": "7.1.2",
+			"resolved": "https://registry.npmjs.org/vite/-/vite-7.1.2.tgz",
+			"integrity": "sha512-J0SQBPlQiEXAF7tajiH+rUooJPo0l8KQgyg4/aMunNtrOa7bwuZJsJbDWzeljqQpgftxuq5yNJxQ91O9ts29UQ==",
 			"dev": true,
 			"license": "MIT",
 			"dependencies": {
 				"esbuild": "^0.25.0",
-				"fdir": "^6.5.0",
+				"fdir": "^6.4.6",
 				"picomatch": "^4.0.3",
 				"postcss": "^8.5.6",
 				"rollup": "^4.43.0",
@@ -4310,27 +4264,6 @@
 			"integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
 			"license": "ISC"
 		},
-		"node_modules/ws": {
-			"version": "8.18.3",
-			"resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
-			"integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
-			"license": "MIT",
-			"engines": {
-				"node": ">=10.0.0"
-			},
-			"peerDependencies": {
-				"bufferutil": "^4.0.1",
-				"utf-8-validate": ">=5.0.2"
-			},
-			"peerDependenciesMeta": {
-				"bufferutil": {
-					"optional": true
-				},
-				"utf-8-validate": {
-					"optional": true
-				}
-			}
-		},
 		"node_modules/xtend": {
 			"version": "4.0.2",
 			"resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
@@ -4381,9 +4314,9 @@
 			}
 		},
 		"node_modules/zod": {
-			"version": "4.1.1",
-			"resolved": "https://registry.npmjs.org/zod/-/zod-4.1.1.tgz",
-			"integrity": "sha512-SgMZK/h8Tigt9nnKkfJMvB/mKjiJXaX26xegP4sa+0wHIFVFWVlsQGdhklDmuargBD3Hsi3rsQRIzwJIhTPJHA==",
+			"version": "4.0.17",
+			"resolved": "https://registry.npmjs.org/zod/-/zod-4.0.17.tgz",
+			"integrity": "sha512-1PHjlYRevNxxdy2JZ8JcNAw7rX8V9P1AKkP+x/xZfxB0K5FYfuV+Ug6P/6NVSR2jHQ+FzDDoDHS04nYUsOIyLQ==",
 			"license": "MIT",
 			"funding": {
 				"url": "https://github.com/sponsors/colinhacks"
diff --git a/package.json b/package.json
index 166390f..115be05 100644
--- a/package.json
+++ b/package.json
@@ -16,16 +16,14 @@
 	"author": "",
 	"license": "ISC",
 	"dependencies": {
-		"@babylonjs/core": "^8.24.0",
-		"@babylonjs/gui": "^8.24.0",
 		"@babylonjs/loaders": "^8.24.0",
 		"@fastify/autoload": "^6.0.0",
 		"@fastify/cors": "^11.1.0",
 		"@fastify/sensible": "^6.0.0",
 		"@fastify/swagger": "^9.5.1",
 		"@fastify/swagger-ui": "^5.2.3",
-		"@fastify/websocket": "^11.2.0",
 		"@types/node": "^24.2.0",
+		"babylonjs": "^8.24.0",
 		"fastify": "^5.0.0",
 		"fastify-cli": "^7.4.0",
 		"fastify-plugin": "^5.0.0",
diff --git a/shared/constants.ts b/shared/constants.ts
index a501b40..501a475 100644
--- a/shared/constants.ts
+++ b/shared/constants.ts
@@ -1,5 +1,3 @@
-import { UUID } from './types.js';
-
 export const ERROR_CREATE_USER_FAILED = 'Failed to create user';
 export const ERROR_INVALID_CREDENTIALS = 'Invalid login credentials';
 export const ERROR_INVALID_INPUT = 'Invalid input';
@@ -19,19 +17,10 @@ export const ERROR_UNABLE_TO_PROCESS_AUTHENTICATION_REQUEST =
 export const ERROR_NO_TOKEN = 'No token provided';
 export const ERROR_MALFORMED_TOKEN = 'Malformed token';
 export const ERROR_AUTHENTICATION_FAILED = 'Authentication failed';
-export const ERROR_USER_NOT_CONNECTED = 'User not connected';
 
 export const TOKEN_VALIDITY_PERIOD = '1h';
 
 export const ALLOWED_TOURNAMENT_SIZES = [2, 4];
-export const FIELD_WIDTH = 1800;
-export const FIELD_HEIGTH = 1000;
-export const PADDLE_WIDTH = 100;
 
 export const FASTIFY_LOG_LEVEL = 'info';
 export const APP_LOG_LEVEL = 'debug';
-
-export const START_MESSAGE = { t: 's' };
-export const PAUSE_MESSAGE = { t: 's' };
-
-export const EMPTY_UUID = '00000000-0000-0000-0000-000000000000' as UUID;
diff --git a/shared/enums.ts b/shared/enums.ts
index c5d8838..c94f68b 100644
--- a/shared/enums.ts
+++ b/shared/enums.ts
@@ -10,7 +10,6 @@ export enum MatchStatus {
 	InProgress = 'in_progress',
 	Finished = 'finished',
 	Cancelled = 'cancelled',
-	Paused = 'Paused',
 }
 
 export enum ParticipantStatus {
diff --git a/shared/exceptions.ts b/shared/exceptions.ts
index fb44d19..82c29e4 100644
--- a/shared/exceptions.ts
+++ b/shared/exceptions.ts
@@ -13,17 +13,9 @@ export class TournamentNotFoundError extends Error {
 }
 
 export class MatchNotFoundError extends Error {
-	constructor(id?: string) {
-		if (id) super(`Match not found: ${id}`);
-		else super('Match not found');
-		this.name = 'MatchNotFoundError';
-	}
-}
-
-export class MatchNotReadyError extends Error {
 	constructor(id: string) {
-		super(`Match not ready to start: ${id}`);
-		this.name = 'MatchNotReadyError';
+		super(`Match not found: ${id}`);
+		this.name = 'MatchNotFoundError';
 	}
 }
 
@@ -34,13 +26,6 @@ export class ParticipantNotFoundError extends Error {
 	}
 }
 
-export class UserNotConnectedError extends Error {
-	constructor(message: string) {
-		super(message);
-		this.name = 'UserNotConnectedError';
-	}
-}
-
 export class DatabaseError extends Error {
 	constructor(message: string) {
 		super(message);
diff --git a/shared/types.ts b/shared/types.ts
index b85c304..6cad3f5 100644
--- a/shared/types.ts
+++ b/shared/types.ts
@@ -18,14 +18,3 @@ type UpdateMatchEntry = {
 };
 
 export type UpdateMatchArray = UpdateMatchEntry[];
-
-export interface Vector {
-	x: number;
-	y: number;
-}
-
-export interface Message {
-	t: string;
-	d?: string;
-	l?: number[];
-}
