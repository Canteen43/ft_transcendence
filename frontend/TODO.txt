LEARNED:
- How do HTML, CSS and JS integrate
	- Ways to integrate CSS
		-> inline: <example style="[here]">
		-> internal: <style> [here] </style>
		-> external: <link rel="stylesheet" href="styles.css">
	- Ways to integrate JS
		-> inline: <button onclick="alert('Button clicked!')">Click me</button>
		-> internal: <script> [here] </script>
		-> external: <script src="[link]">
- How does JavaScript work
	- Runtimes (uses engine)
		-> Chrome (V8)
		-> Node (V8)
		-> Firefox (SpiderMonkey)
		-> Inside the browser JS needs to be wrapped in HTML,
			outside it is run without.
	- Frameworks
- How does TypeScript work
	-> like JS but variables have types
	-> TS is compiled to JS with "tsc filename.ts" (+ optional tsconfig.json)
- How does Bootstrap work
	-> Access components via class="comp."
- How does Tailwind work
	-> Access utilities via class="util."
	- Including it with CDN
		-> "dirty" way. <script src="https://cdn.tailwindcss.com"></script>
	- Building with npx and input.css
		-> npm install tailwindcss @tailwindcss/cli
		-> npx @tailwindcss/cli -i input.css -o output.css
		-> use input.css for config (if needed)
- What is NMP
	-> Node Package Manager
	-> "npm init -y" creates package.json
	-> "nmp install [package]" installs packages locally in node_modules/
- What is NVM
	-> Node Version Manager that doesn't need root to be run
	-> nvm install 20
	-> nvm use 20
- What is DBeaver
	-> Client tool to interact with databases
- What is Postman
	-> Client tool to interact with APIs
	-> But also to mock APIs
- How do Single-Page-Applications work
	-> Minimal HTML file as entypoint
	-> All the code and design is done in JavaScript/TypeScript
	-> JS/TS files manipulate the DOM
- How to get from HTML to page
	-> HTML ---Blink---> DOM
	-> DOM ---Blink---> Draw instructions
	-> Draw instructions ---Skia---> Rendered Page
- Ways to manipulate the DOM with JS/TS
	-> Direct DOM API calls
	-> Embedded HTML (inline or even from files)
	-> JSX (Pseudo HTML that gets compiled into react functions that do DOM API calls)
- How to integrate TailwindCSS into DOM manipulation
	-> Same as normal HTML, just insert classes inline
- How to build our frontend
	-> Minimal HTML entrypoint
	-> Typescript for dynamic page generation
	-> TailwindCSS classes inside HTML for design
- What is CORS
	-> Cross-Origin Resource Sharing
	-> browser-feature that prevents cross-access
		-> e.g. malicious webpage sending requests to other pages using my credentials
- How to make simple Vite-SPA setup work
	- Without npm, quick and easy:
		-> html-entrypoint + main.js + "npx vite"
	- With npm:
		-> nmp init -y
		-> npm install -D vite
		-> add "dev": "vite" to package.json, "scripts"
- "vite" vs "vite build"
	-> "vite" launches a test webserver and builds the project on-demand in-cache
		-> for development
	-> "vite build" builds the optimized deployment code
		-> for shipping only
	- what is amazing about this
		-> normally. testing would require building first. that step is saved
- How to setup tsc
	- without config
		-> npm install -D typescript
		-> npx tsc example.ts (-> will create example.js)
		-> (not possible without npm because package and CLI are not identical)
	- with config
		-> "npx tsc --init" to generate default tsconfig.json
		-> "npx tsc" without filename works
- How do launch.json and tasks.json work
	-> both inside .vscode/
	- tasks.json
		-> giving descriptive tasks names to useful commands
	- launch.json
		-> instructions for the debugger
- How does debug setting work for Vite + TS
	-> add "npm run dev" as task in tasks.json
	-> add "pwa-chrome" as type and "run dev" as preLaunchTask in launch.json
- TS: Do I need any typescript setup when using vite?
	-> not for developing or building
		-> Vite does that
		-> VS code does type checks inside the files
	-> but for type checking
		-> not done by Vite
		-> use "tsc --noEmit" for that
		-> do before shipping to be sure
- What does our git workflow look like
	-> Step 1: do work on branch karl
	-> Step 2: Check main for updates
		-> git checkout main
		-> git pull origin main
		-> git checkout karl
	-> Step 3: Bring changes from main to karl
		-> git merge main
	-> Step 4: Update main with my changes
		-> git checkout main
		-> git merge karl
		-> git push origin main
- How does the session history work
	-> List of Entries
	-> Browser adds entries for normal navigation
	-> Websites can add extra entries with pushState()
		-> but they cannot access past entries
	-> Websites can add the current entry with replaceState()
	-> the args for pushState() and replaceState() are:
		-> stateObj
		-> title
		-> url
	-> after navigating within the same page, the browser fires the 'popstate' event
		-> can be caught with an event listener
	-> "normal" entries are different from website-created entries
	- what about "Are you sure about leaving?" prompts
		-> these are done with the 'beforeunload' event
		-> the 'popstate' event would be too late
- Hash-based routing
	-> To make SPAs navigable, SPAs can use hash-based routing
	-> "location.hash = 'something'" will
		-> show a URL with a hash in the browser
		-> add an entry to the session history (which makes buttons work)
	-> the 'hashchange' event will catch changed hashes from both
		-> manual address bar manipulation
		-> button navigation 
- Learn about URLs
	- Query parameters
		-> after path, before Hash
		-> format: "?key=value&key2=value2"
		-> delivered to webserver as part of path
		-> webserver parses and can handle freely
		-> rising popularity
		-> hijacked for client side routing
			-> known to be confusing
	- Hash
		-> after query params
		-> format "#something/something"
		-> never sent to webserver
		-> change triggers event 'hashchange'
			-> can be handled by browser
		-> originally developed for jumping to page sections
		-> hijacked for client side routing
- What is SEO
	-> search engine optimization (crawling, indexing, ranking)
- How to structure .ts files in vanilla TS SPA
	- many small files
	- mass import with vite
	- emphasize components
- Where did I get the galaxy video
	-> https://pixabay.com/videos/galaxy-stars-sky-night-clouds-148593/
- How do types work in JavaScript
	-> JS is dynamically typed
	-> Variables don't have types. Values do.
	-> 7 primitive types:
		-> number (double under the hood)
		-> string
		-> boolean
		-> null
		-> undefined
		-> bigint (ints > 2^53)
		-> symbol
	-> Another type: object (like struct, includes array)
	-> Creating variables
		-> let x (mutable)
		-> const x (immutable, excepts elements inside objects)
- How do types work in TypeScript
	-> Like JS but adds types to variables as well
	-> Checks that types of variables aren't changed
	-> type 'any' can be changed
	-> inference: 
		-> when variable type isn't declared, it is inferred by value type
	-> union types:
		-> one variable can allow multiple types (let x: number|null)
	-> objects and arrays:
		-> arrays get type that applies to all elements
		-> objects elements types cannot be changed and no elements can be added
- Where to hash passwords
	-> in the backend
	-> backend can hash and apply salts with more control
	-> hashing is about avoiding plain storage, not transmission security
- What is a JWT
	-> proofs that user has logged in
	-> server does not need to keep a session register
	-> three parts:
		-> header (base64)
			-> token and signature encryption type
		-> payload (base64)
			-> e.g. id, role, expiry
		-> signature
			-> created by hashing header plus payload with a private key on server
	-> client can resend its given jwt but not generated one
	-> server can verify token realness by re-running encryption and checking signature
	-> Common problem:
		-> Tokens still work after logout unless a blacklist is kept
			-> blacklist defeats original purpose

TODO:
Project:
- Continue Login Button

- Figure out how to display Wouters API webpage

- Add JWT
	- make it live in a variable for now
		- (will log out at page reload)


- Add websocket button?
- Create web socket
	- Add websocket class
	- Make Websocket Connection Button
	- Display everything that is send over websocket
	- How to pass events to game screen?

- Add music
- Design tournament creation modal
- Make Tournament Creation Modal
- Add more closing functionality to modals


DISCUSSION POINTS:
- Is Babylon Phisics Engine allowed?
	- Three Ways:
		- Most bare: have own code that simulates game
		- Medium: Use babylon plus extra code
		- Advanced: Use CannonJS
	- I think we go even use CannonJS
- Do we want Powerups/Obstacles?
- What modules are we doing?
- Who does what?
- Should we priotize getting a running game?